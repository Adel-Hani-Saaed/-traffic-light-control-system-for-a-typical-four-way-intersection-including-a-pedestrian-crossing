
ReNile_Task_V1_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003104  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003104  00003198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080018a  0080018a  000032c2  2**0
                  ALLOC
  3 .stab         00003894  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019bb  00000000  00000000  00006b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008513  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000086b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000088a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000acaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000c026  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_1>
       8:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_2>
       c:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_10>
      2c:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 18 	call	0x307c	; 0x307c <main>
      8a:	0c 94 80 18 	jmp	0x3100	; 0x3100 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <TIMER0_voidInit>:

volatile u32 Timer_u32Counter = 0 ;


void TIMER0_voidInit()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

	/*Initialize Waveform Generation Mode as Normal Mode*/
	CLR_BIT(TCCR0_REG, TCCR0_WGM00);
     e00:	a3 e5       	ldi	r26, 0x53	; 83
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e3 e5       	ldi	r30, 0x53	; 83
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 7b       	andi	r24, 0xBF	; 191
     e0c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG, TCCR0_WGM01);
     e0e:	a3 e5       	ldi	r26, 0x53	; 83
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e3 e5       	ldi	r30, 0x53	; 83
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	87 7f       	andi	r24, 0xF7	; 247
     e1a:	8c 93       	st	X, r24

	/*Set value PreLoad*/
	TCNT0_REG = TIMER0_PRELOAD_VAL;
     e1c:	e2 e5       	ldi	r30, 0x52	; 82
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	10 82       	st	Z, r1
#if TIMER0_OVERFLOW_INTERRUPT == DISABLE

	CLR_BIT(TIMSK_REG , TIMSK_TOIE0);

#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
	SET_BIT(TIMSK_REG , TIMSK_TOIE0);
     e22:	a9 e5       	ldi	r26, 0x59	; 89
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e9 e5       	ldi	r30, 0x59	; 89
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	81 60       	ori	r24, 0x01	; 1
     e2e:	8c 93       	st	X, r24
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Pre_scaler*/
	TCCR0_REG &= TIMER_PRESCALER_MASK ;
     e30:	a3 e5       	ldi	r26, 0x53	; 83
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e3 e5       	ldi	r30, 0x53	; 83
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 7f       	andi	r24, 0xF8	; 248
     e3c:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_PRESCALER ;
     e3e:	a3 e5       	ldi	r26, 0x53	; 83
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e3 e5       	ldi	r30, 0x53	; 83
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	8c 93       	st	X, r24
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TIMER0_voidSetPreloadValue>:


void TIMER0_voidSetPreloadValue (u8 Copy_u8PreloadValue)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = Copy_u8PreloadValue;
     e5e:	e2 e5       	ldi	r30, 0x52	; 82
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	80 83       	st	Z, r24
}
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8CTCValue)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = Copy_u8CTCValue;
     e7a:	ec e5       	ldi	r30, 0x5C	; 92
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	80 83       	st	Z, r24
}
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG ;
     e92:	e2 e5       	ldi	r30, 0x52	; 82
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TIMER0_voidStopTimer>:

void TIMER0_voidStopTimer(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	TCNT0_REG = 0x00;
     ea6:	e2 e5       	ldi	r30, 0x52	; 82
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	10 82       	st	Z, r1
}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <TIMER0_voidDelay_ms_>:

void TIMER0_voidDelay_ms_(u32 Copy_u16TimeNeed)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	28 97       	sbiw	r28, 0x08	; 8
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	6d 83       	std	Y+5, r22	; 0x05
     ec8:	7e 83       	std	Y+6, r23	; 0x06
     eca:	8f 83       	std	Y+7, r24	; 0x07
     ecc:	98 87       	std	Y+8, r25	; 0x08


	TIMER0_voidSetPreloadValue(0);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 29 07 	call	0xe52	; 0xe52 <TIMER0_voidSetPreloadValue>

	Timer_u32Counter = 0 ;
     ed4:	10 92 8e 01 	sts	0x018E, r1
     ed8:	10 92 8f 01 	sts	0x018F, r1
     edc:	10 92 90 01 	sts	0x0190, r1
     ee0:	10 92 91 01 	sts	0x0191, r1

	u32 Timer_u32Target = Copy_u16TimeNeed * 4 ;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	af 81       	ldd	r26, Y+7	; 0x07
     eea:	b8 85       	ldd	r27, Y+8	; 0x08
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	aa 1f       	adc	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	aa 1f       	adc	r26, r26
     efa:	bb 1f       	adc	r27, r27
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	ab 83       	std	Y+3, r26	; 0x03
     f02:	bc 83       	std	Y+4, r27	; 0x04

	while(Timer_u32Target > Timer_u32Counter );
     f04:	20 91 8e 01 	lds	r18, 0x018E
     f08:	30 91 8f 01 	lds	r19, 0x018F
     f0c:	40 91 90 01 	lds	r20, 0x0190
     f10:	50 91 91 01 	lds	r21, 0x0191
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	ab 81       	ldd	r26, Y+3	; 0x03
     f1a:	bc 81       	ldd	r27, Y+4	; 0x04
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	4a 07       	cpc	r20, r26
     f22:	5b 07       	cpc	r21, r27
     f24:	78 f3       	brcs	.-34     	; 0xf04 <TIMER0_voidDelay_ms_+0x52>
}
     f26:	28 96       	adiw	r28, 0x08	; 8
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <TIMER0_u8SetCallBackCTCMode>:


u8 TIMER0_u8SetCallBackCTCMode(void (*Copy_pvCallBackFunc)(void))
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <TIMER0_u8SetCallBackCTCMode+0x6>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	39 f0       	breq	.+14     	; 0xf62 <TIMER0_u8SetCallBackCTCMode+0x2a>
	{
		Timer0_pvCallBackFuncCTCMode = Copy_pvCallBackFunc;
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	90 93 8b 01 	sts	0x018B, r25
     f5c:	80 93 8a 01 	sts	0x018A, r24
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <TIMER0_u8SetCallBackCTCMode+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f62:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <__vector_10>:


/*TIMER0 CTC Mode ISR*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_pvCallBackFuncCTCMode != NULL)
     f9c:	80 91 8a 01 	lds	r24, 0x018A
     fa0:	90 91 8b 01 	lds	r25, 0x018B
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <__vector_10+0x40>
	{
		Timer0_pvCallBackFuncCTCMode();
     fa8:	e0 91 8a 01 	lds	r30, 0x018A
     fac:	f0 91 8b 01 	lds	r31, 0x018B
     fb0:	09 95       	icall
	}
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <TIMER0_u8SetCallBackOverFlowMode>:



u8 TIMER0_u8SetCallBackOverFlowMode(void (*Copy_pvCallBackFunc)(void))
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <TIMER0_u8SetCallBackOverFlowMode+0x6>
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvCallBackFunc != NULL)
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	39 f0       	breq	.+14     	; 0x1002 <TIMER0_u8SetCallBackOverFlowMode+0x2a>
	{
		Timer0_pvCallBackFuncOverFlowMode = Copy_pvCallBackFunc;
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	90 93 8d 01 	sts	0x018D, r25
     ffc:	80 93 8c 01 	sts	0x018C, r24
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <TIMER0_u8SetCallBackOverFlowMode+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1002:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	Timer_u32Counter++;
    103c:	80 91 8e 01 	lds	r24, 0x018E
    1040:	90 91 8f 01 	lds	r25, 0x018F
    1044:	a0 91 90 01 	lds	r26, 0x0190
    1048:	b0 91 91 01 	lds	r27, 0x0191
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	a1 1d       	adc	r26, r1
    1050:	b1 1d       	adc	r27, r1
    1052:	80 93 8e 01 	sts	0x018E, r24
    1056:	90 93 8f 01 	sts	0x018F, r25
    105a:	a0 93 90 01 	sts	0x0190, r26
    105e:	b0 93 91 01 	sts	0x0191, r27
	if (Timer0_pvCallBackFuncOverFlowMode != NULL)
    1062:	80 91 8c 01 	lds	r24, 0x018C
    1066:	90 91 8d 01 	lds	r25, 0x018D
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	29 f0       	breq	.+10     	; 0x1078 <__vector_11+0x66>
	{
		Timer0_pvCallBackFuncOverFlowMode();
    106e:	e0 91 8c 01 	lds	r30, 0x018C
    1072:	f0 91 8d 01 	lds	r31, 0x018D
    1076:	09 95       	icall
	}
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"

/*Enable GIE (Global interrupt Enable)*/
void GIE_voidEnable (void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,SREG_I);
    10a6:	af e5       	ldi	r26, 0x5F	; 95
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ef e5       	ldi	r30, 0x5F	; 95
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	8c 93       	st	X, r24
}
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <GIE_voidDisable>:

/*Disable GIE (Global interrupt Enable)*/
void GIE_voidDisable (void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG_REG,SREG_I);
    10c2:	af e5       	ldi	r26, 0x5F	; 95
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e5       	ldi	r30, 0x5F	; 95
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 77       	andi	r24, 0x7F	; 127
    10ce:	8c 93       	st	X, r24
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <EXTI_voidINT0Init>:
void (* EXTI_pvINT1PointerToFunc)(void) = NULL;
void (* EXTI_pvINT2PointerToFunc)(void) = NULL;


void EXTI_voidINT0Init (void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_SENSE == EXTI_u8_ANY_LOGICAL_CHANGE
	CLR_BIT(MCUCR_REG,MCUCR_ISC01);
	SET_BIT(MCUCR_REG,MCUCR_ISC00);

#elif EXTI_INT0_SENSE == EXTI_u8_FALLING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC01);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT0_SENSE configuration is not option"
#endif

#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT0);
    10fa:	ab e5       	ldi	r26, 0x5B	; 91
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	eb e5       	ldi	r30, 0x5B	; 91
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	8c 93       	st	X, r24
#elif EXTI_INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT0);
#else
#error"Wrong EXTI_INT0_INITIAL_STATE configuration is not option"
#endif
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <EXTI_voidINT1Init>:



void EXTI_voidINT1Init (void)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT1_SENSE == EXTI_u8_ANY_LOGICAL_CHANGE
	CLR_BIT(MCUCR_REG,MCUCR_ISC11);
	SET_BIT(MCUCR_REG,MCUCR_ISC10);

#elif EXTI_INT1_SENSE == EXTI_u8_FALLING_EDGE
	SET_BIT(MCUCR_REG,MCUCR_ISC11);
    1116:	a5 e5       	ldi	r26, 0x55	; 85
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e5       	ldi	r30, 0x55	; 85
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    1124:	a5 e5       	ldi	r26, 0x55	; 85
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e5       	ldi	r30, 0x55	; 85
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8b 7f       	andi	r24, 0xFB	; 251
    1130:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT1_SENSE configuration is not option"
#endif

#if EXTI_INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT1);
    1132:	ab e5       	ldi	r26, 0x5B	; 91
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e5       	ldi	r30, 0x5B	; 91
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 68       	ori	r24, 0x80	; 128
    113e:	8c 93       	st	X, r24
#elif EXTI_INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT1);
#else
#error"Wrong EXTI_INT1_INITIAL_STATE configuration is not option"
#endif
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <EXTI_voidINT2Init>:



void EXTI_voidINT2Init (void)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62

#if EXTI_INT2_SENSE == EXTI_u8_FALLING_EDGE
	CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    114e:	a4 e5       	ldi	r26, 0x54	; 84
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e4 e5       	ldi	r30, 0x54	; 84
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 7b       	andi	r24, 0xBF	; 191
    115a:	8c 93       	st	X, r24
#else
#error"Wrong EXTI_INT2_SENSE configuration is not option"
#endif

#if EXTI_INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR_REG,GICR_INT2);
    115c:	ab e5       	ldi	r26, 0x5B	; 91
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	eb e5       	ldi	r30, 0x5B	; 91
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	8c 93       	st	X, r24
#elif EXTI_INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR_REG,GICR_INT2);
#else
#error"Wrong EXTI_INT2_INITIAL_STATE configuration is not option"
#endif
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <EXTI_u8ExtIEnable>:




u8 EXTI_u8ExtIEnable(u8 Copy_u8IntNum, u8 Copy_u8IntEdgeSrc)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2b 97       	sbiw	r28, 0x0b	; 11
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntNum)
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3b 87       	std	Y+11, r19	; 0x0b
    1194:	2a 87       	std	Y+10, r18	; 0x0a
    1196:	8a 85       	ldd	r24, Y+10	; 0x0a
    1198:	9b 85       	ldd	r25, Y+11	; 0x0b
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <EXTI_u8ExtIEnable+0x32>
    11a0:	86 c0       	rjmp	.+268    	; 0x12ae <EXTI_u8ExtIEnable+0x13e>
    11a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    11a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <EXTI_u8ExtIEnable+0x3e>
    11ac:	fb c0       	rjmp	.+502    	; 0x13a4 <EXTI_u8ExtIEnable+0x234>
    11ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <EXTI_u8ExtIEnable+0x48>
    11b6:	26 c1       	rjmp	.+588    	; 0x1404 <EXTI_u8ExtIEnable+0x294>
	{
	case EXTI_u8_INT0 :
		switch(Copy_u8IntEdgeSrc)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	39 87       	std	Y+9, r19	; 0x09
    11c0:	28 87       	std	Y+8, r18	; 0x08
    11c2:	88 85       	ldd	r24, Y+8	; 0x08
    11c4:	99 85       	ldd	r25, Y+9	; 0x09
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	69 f1       	breq	.+90     	; 0x1226 <EXTI_u8ExtIEnable+0xb6>
    11cc:	28 85       	ldd	r18, Y+8	; 0x08
    11ce:	39 85       	ldd	r19, Y+9	; 0x09
    11d0:	23 30       	cpi	r18, 0x03	; 3
    11d2:	31 05       	cpc	r19, r1
    11d4:	34 f4       	brge	.+12     	; 0x11e2 <EXTI_u8ExtIEnable+0x72>
    11d6:	88 85       	ldd	r24, Y+8	; 0x08
    11d8:	99 85       	ldd	r25, Y+9	; 0x09
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	91 05       	cpc	r25, r1
    11de:	69 f0       	breq	.+26     	; 0x11fa <EXTI_u8ExtIEnable+0x8a>
    11e0:	64 c0       	rjmp	.+200    	; 0x12aa <EXTI_u8ExtIEnable+0x13a>
    11e2:	28 85       	ldd	r18, Y+8	; 0x08
    11e4:	39 85       	ldd	r19, Y+9	; 0x09
    11e6:	23 30       	cpi	r18, 0x03	; 3
    11e8:	31 05       	cpc	r19, r1
    11ea:	99 f1       	breq	.+102    	; 0x1252 <EXTI_u8ExtIEnable+0xe2>
    11ec:	88 85       	ldd	r24, Y+8	; 0x08
    11ee:	99 85       	ldd	r25, Y+9	; 0x09
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	91 05       	cpc	r25, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <EXTI_u8ExtIEnable+0x88>
    11f6:	43 c0       	rjmp	.+134    	; 0x127e <EXTI_u8ExtIEnable+0x10e>
    11f8:	58 c0       	rjmp	.+176    	; 0x12aa <EXTI_u8ExtIEnable+0x13a>
		{
		case EXTI_u8_FALLING_EDGE:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    11fa:	a5 e5       	ldi	r26, 0x55	; 85
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e5       	ldi	r30, 0x55	; 85
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	82 60       	ori	r24, 0x02	; 2
    1206:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1208:	a5 e5       	ldi	r26, 0x55	; 85
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e5 e5       	ldi	r30, 0x55	; 85
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8e 7f       	andi	r24, 0xFE	; 254
    1214:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    1216:	ab e5       	ldi	r26, 0x5B	; 91
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e5       	ldi	r30, 0x5B	; 91
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	8c 93       	st	X, r24
    1224:	f0 c0       	rjmp	.+480    	; 0x1406 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_RISING_EDGE:
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1226:	a5 e5       	ldi	r26, 0x55	; 85
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e5       	ldi	r30, 0x55	; 85
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1234:	a5 e5       	ldi	r26, 0x55	; 85
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e5       	ldi	r30, 0x55	; 85
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 64       	ori	r24, 0x40	; 64
    124e:	8c 93       	st	X, r24
    1250:	da c0       	rjmp	.+436    	; 0x1406 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			CLR_BIT(MCUCR_REG,MCUCR_ISC01);
    1252:	a5 e5       	ldi	r26, 0x55	; 85
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e5       	ldi	r30, 0x55	; 85
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8d 7f       	andi	r24, 0xFD	; 253
    125e:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1260:	a5 e5       	ldi	r26, 0x55	; 85
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e5       	ldi	r30, 0x55	; 85
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    126e:	ab e5       	ldi	r26, 0x5B	; 91
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e5       	ldi	r30, 0x5B	; 91
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 64       	ori	r24, 0x40	; 64
    127a:	8c 93       	st	X, r24
    127c:	c4 c0       	rjmp	.+392    	; 0x1406 <EXTI_u8ExtIEnable+0x296>

			break;
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,MCUCR_ISC01);
    127e:	a5 e5       	ldi	r26, 0x55	; 85
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e5       	ldi	r30, 0x55	; 85
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    128c:	a5 e5       	ldi	r26, 0x55	; 85
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e5 e5       	ldi	r30, 0x55	; 85
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	8c 93       	st	X, r24
			SET_BIT(GICR_REG,GICR_INT0);
    129a:	ab e5       	ldi	r26, 0x5B	; 91
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e5       	ldi	r30, 0x5B	; 91
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	8c 93       	st	X, r24
    12a8:	ae c0       	rjmp	.+348    	; 0x1406 <EXTI_u8ExtIEnable+0x296>

			break;
		default : Local_u8ErrorState = STD_TYPES_NOK;
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	ac c0       	rjmp	.+344    	; 0x1406 <EXTI_u8ExtIEnable+0x296>
		}
		break;

		case EXTI_u8_INT1 :
			switch(Copy_u8IntEdgeSrc)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3f 83       	std	Y+7, r19	; 0x07
    12b6:	2e 83       	std	Y+6, r18	; 0x06
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	9f 81       	ldd	r25, Y+7	; 0x07
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	69 f1       	breq	.+90     	; 0x131c <EXTI_u8ExtIEnable+0x1ac>
    12c2:	2e 81       	ldd	r18, Y+6	; 0x06
    12c4:	3f 81       	ldd	r19, Y+7	; 0x07
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	34 f4       	brge	.+12     	; 0x12d8 <EXTI_u8ExtIEnable+0x168>
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	9f 81       	ldd	r25, Y+7	; 0x07
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	69 f0       	breq	.+26     	; 0x12f0 <EXTI_u8ExtIEnable+0x180>
    12d6:	64 c0       	rjmp	.+200    	; 0x13a0 <EXTI_u8ExtIEnable+0x230>
    12d8:	2e 81       	ldd	r18, Y+6	; 0x06
    12da:	3f 81       	ldd	r19, Y+7	; 0x07
    12dc:	23 30       	cpi	r18, 0x03	; 3
    12de:	31 05       	cpc	r19, r1
    12e0:	99 f1       	breq	.+102    	; 0x1348 <EXTI_u8ExtIEnable+0x1d8>
    12e2:	8e 81       	ldd	r24, Y+6	; 0x06
    12e4:	9f 81       	ldd	r25, Y+7	; 0x07
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	91 05       	cpc	r25, r1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <EXTI_u8ExtIEnable+0x17e>
    12ec:	43 c0       	rjmp	.+134    	; 0x1374 <EXTI_u8ExtIEnable+0x204>
    12ee:	58 c0       	rjmp	.+176    	; 0x13a0 <EXTI_u8ExtIEnable+0x230>
			{
			case EXTI_u8_FALLING_EDGE:
				SET_BIT(MCUCR_REG,MCUCR_ISC11);
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e5       	ldi	r30, 0x55	; 85
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 60       	ori	r24, 0x08	; 8
    12fc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    12fe:	a5 e5       	ldi	r26, 0x55	; 85
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e5       	ldi	r30, 0x55	; 85
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8b 7f       	andi	r24, 0xFB	; 251
    130a:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    130c:	ab e5       	ldi	r26, 0x5B	; 91
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	eb e5       	ldi	r30, 0x5B	; 91
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	8c 93       	st	X, r24
    131a:	75 c0       	rjmp	.+234    	; 0x1406 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_RISING_EDGE:
				SET_BIT(MCUCR_REG,MCUCR_ISC11);
    131c:	a5 e5       	ldi	r26, 0x55	; 85
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e5       	ldi	r30, 0x55	; 85
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	88 60       	ori	r24, 0x08	; 8
    1328:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,MCUCR_ISC10);
    132a:	a5 e5       	ldi	r26, 0x55	; 85
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e5       	ldi	r30, 0x55	; 85
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	84 60       	ori	r24, 0x04	; 4
    1336:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    1338:	ab e5       	ldi	r26, 0x5B	; 91
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	eb e5       	ldi	r30, 0x5B	; 91
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 68       	ori	r24, 0x80	; 128
    1344:	8c 93       	st	X, r24
    1346:	5f c0       	rjmp	.+190    	; 0x1406 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				CLR_BIT(MCUCR_REG,MCUCR_ISC11);
    1348:	a5 e5       	ldi	r26, 0x55	; 85
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e5       	ldi	r30, 0x55	; 85
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	87 7f       	andi	r24, 0xF7	; 247
    1354:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,MCUCR_ISC10);
    1356:	a5 e5       	ldi	r26, 0x55	; 85
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e5       	ldi	r30, 0x55	; 85
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	84 60       	ori	r24, 0x04	; 4
    1362:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    1364:	ab e5       	ldi	r26, 0x5B	; 91
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e5       	ldi	r30, 0x5B	; 91
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 68       	ori	r24, 0x80	; 128
    1370:	8c 93       	st	X, r24
    1372:	49 c0       	rjmp	.+146    	; 0x1406 <EXTI_u8ExtIEnable+0x296>
				break;
			case EXTI_u8_LOW_LEVEL:
				CLR_BIT(MCUCR_REG,MCUCR_ISC11);
    1374:	a5 e5       	ldi	r26, 0x55	; 85
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e5       	ldi	r30, 0x55	; 85
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	87 7f       	andi	r24, 0xF7	; 247
    1380:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    1382:	a5 e5       	ldi	r26, 0x55	; 85
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e5       	ldi	r30, 0x55	; 85
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	8c 93       	st	X, r24
				SET_BIT(GICR_REG,GICR_INT1);
    1390:	ab e5       	ldi	r26, 0x5B	; 91
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e5       	ldi	r30, 0x5B	; 91
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 68       	ori	r24, 0x80	; 128
    139c:	8c 93       	st	X, r24
    139e:	33 c0       	rjmp	.+102    	; 0x1406 <EXTI_u8ExtIEnable+0x296>
				break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	31 c0       	rjmp	.+98     	; 0x1406 <EXTI_u8ExtIEnable+0x296>
			}
			break;

			case EXTI_u8_INT2 :
				switch(Copy_u8IntEdgeSrc)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3d 83       	std	Y+5, r19	; 0x05
    13ac:	2c 83       	std	Y+4, r18	; 0x04
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <EXTI_u8ExtIEnable+0x254>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	81 f0       	breq	.+32     	; 0x13e2 <EXTI_u8ExtIEnable+0x272>
    13c2:	1e c0       	rjmp	.+60     	; 0x1400 <EXTI_u8ExtIEnable+0x290>
				{
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    13c4:	a4 e5       	ldi	r26, 0x54	; 84
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e4 e5       	ldi	r30, 0x54	; 84
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 7b       	andi	r24, 0xBF	; 191
    13d0:	8c 93       	st	X, r24
					SET_BIT(GICR_REG,GICR_INT2);
    13d2:	ab e5       	ldi	r26, 0x5B	; 91
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	eb e5       	ldi	r30, 0x5B	; 91
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 62       	ori	r24, 0x20	; 32
    13de:	8c 93       	st	X, r24
    13e0:	12 c0       	rjmp	.+36     	; 0x1406 <EXTI_u8ExtIEnable+0x296>
					break;
				case EXTI_u8_RISING_EDGE:
					SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    13e2:	a4 e5       	ldi	r26, 0x54	; 84
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e5       	ldi	r30, 0x54	; 84
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 64       	ori	r24, 0x40	; 64
    13ee:	8c 93       	st	X, r24
					SET_BIT(GICR_REG,GICR_INT2);
    13f0:	ab e5       	ldi	r26, 0x5B	; 91
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	eb e5       	ldi	r30, 0x5B	; 91
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 62       	ori	r24, 0x20	; 32
    13fc:	8c 93       	st	X, r24
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <EXTI_u8ExtIEnable+0x296>
					break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <EXTI_u8ExtIEnable+0x296>
				}
				break;
				default : Local_u8ErrorState = STD_TYPES_NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	2b 96       	adiw	r28, 0x0b	; 11
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <EXTI_u8ExtIDisable>:


u8 EXTI_u8ExtIDisable(u8 Copy_u8IntNum)

{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <EXTI_u8ExtIDisable+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <EXTI_u8ExtIDisable+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8IntNum)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	2b 83       	std	Y+3, r18	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	89 f0       	breq	.+34     	; 0x1462 <EXTI_u8ExtIDisable+0x48>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	a1 f0       	breq	.+40     	; 0x1472 <EXTI_u8ExtIDisable+0x58>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	c1 f4       	brne	.+48     	; 0x1482 <EXTI_u8ExtIDisable+0x68>
	{
	case EXTI_u8_INT0 :
		CLR_BIT(GICR_REG,GICR_INT0);
    1452:	ab e5       	ldi	r26, 0x5B	; 91
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	eb e5       	ldi	r30, 0x5B	; 91
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7b       	andi	r24, 0xBF	; 191
    145e:	8c 93       	st	X, r24
    1460:	11 c0       	rjmp	.+34     	; 0x1484 <EXTI_u8ExtIDisable+0x6a>
		break;
	case EXTI_u8_INT1 :
		CLR_BIT(GICR_REG,GICR_INT1);
    1462:	ab e5       	ldi	r26, 0x5B	; 91
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	eb e5       	ldi	r30, 0x5B	; 91
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 77       	andi	r24, 0x7F	; 127
    146e:	8c 93       	st	X, r24
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <EXTI_u8ExtIDisable+0x6a>
		break;
	case EXTI_u8_INT2 :
		CLR_BIT(GICR_REG,GICR_INT2);
    1472:	ab e5       	ldi	r26, 0x5B	; 91
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	eb e5       	ldi	r30, 0x5B	; 91
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	8f 7d       	andi	r24, 0xDF	; 223
    147e:	8c 93       	st	X, r24
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <EXTI_u8ExtIDisable+0x6a>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    1482:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <EXTI_u8ExtISetCallBackINT0>:



/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT0 (void (*Copy_pvInt0Func)(void))
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <EXTI_u8ExtISetCallBackINT0+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt0Func != NULL)
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	39 f0       	breq	.+14     	; 0x14be <EXTI_u8ExtISetCallBackINT0+0x2a>
	{
		EXTI_pvINT0PointerToFunc = Copy_pvInt0Func;
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	90 93 93 01 	sts	0x0193, r25
    14b8:	80 93 92 01 	sts	0x0192, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <EXTI_u8ExtISetCallBackINT0+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <EXTI_u8ExtISetCallBackINT1>:


/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT1 (void (*Copy_pvInt1Func)(void))
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <EXTI_u8ExtISetCallBackINT1+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt1Func != NULL)
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <EXTI_u8ExtISetCallBackINT1+0x2a>
	{
		EXTI_pvINT1PointerToFunc = Copy_pvInt1Func;
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	90 93 95 01 	sts	0x0195, r25
    14f2:	80 93 94 01 	sts	0x0194, r24
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <EXTI_u8ExtISetCallBackINT1+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    14f8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <EXTI_u8ExtISetCallBackINT2>:



/*must be pass the Address the function callback (&Name_Func) or (Name_func) because name the function is address the function */
u8 EXTI_u8ExtISetCallBackINT2 (void (*Copy_pvInt2Func)(void))
{
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <EXTI_u8ExtISetCallBackINT2+0x6>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	9b 83       	std	Y+3, r25	; 0x03
    1516:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=STD_TYPES_OK;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pvInt2Func != NULL)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	39 f0       	breq	.+14     	; 0x1532 <EXTI_u8ExtISetCallBackINT2+0x2a>
	{
		EXTI_pvINT2PointerToFunc = Copy_pvInt2Func;
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	90 93 97 01 	sts	0x0197, r25
    152c:	80 93 96 01 	sts	0x0196, r24
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <EXTI_u8ExtISetCallBackINT2+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1532:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <__vector_1>:

/* ISR Of INT0 , INT1 and INT2 to calling the function Callback in main */

void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvINT0PointerToFunc != NULL)
    156c:	80 91 92 01 	lds	r24, 0x0192
    1570:	90 91 93 01 	lds	r25, 0x0193
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	29 f0       	breq	.+10     	; 0x1582 <__vector_1+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT0PointerToFunc();
    1578:	e0 91 92 01 	lds	r30, 0x0192
    157c:	f0 91 93 01 	lds	r31, 0x0193
    1580:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <__vector_2>:


void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
    15a8:	1f 92       	push	r1
    15aa:	0f 92       	push	r0
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	0f 92       	push	r0
    15b0:	11 24       	eor	r1, r1
    15b2:	2f 93       	push	r18
    15b4:	3f 93       	push	r19
    15b6:	4f 93       	push	r20
    15b8:	5f 93       	push	r21
    15ba:	6f 93       	push	r22
    15bc:	7f 93       	push	r23
    15be:	8f 93       	push	r24
    15c0:	9f 93       	push	r25
    15c2:	af 93       	push	r26
    15c4:	bf 93       	push	r27
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvINT1PointerToFunc != NULL)
    15d2:	80 91 94 01 	lds	r24, 0x0194
    15d6:	90 91 95 01 	lds	r25, 0x0195
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <__vector_2+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT1PointerToFunc();
    15de:	e0 91 94 01 	lds	r30, 0x0194
    15e2:	f0 91 95 01 	lds	r31, 0x0195
    15e6:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_3>:


void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	/*check the Pointer */
	if (EXTI_pvINT2PointerToFunc != NULL)
    1638:	80 91 96 01 	lds	r24, 0x0196
    163c:	90 91 97 01 	lds	r25, 0x0197
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	29 f0       	breq	.+10     	; 0x164e <__vector_3+0x40>
	{
		/*calling the function (Pointer to function)*/
		EXTI_pvINT2PointerToFunc();
    1644:	e0 91 96 01 	lds	r30, 0x0196
    1648:	f0 91 97 01 	lds	r31, 0x0197
    164c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <DIO_enumSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_register.h"


DIO_ErrorStatus	DIO_enumSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin , u8 Copy_u8Direction )
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	28 97       	sbiw	r28, 0x08	; 8
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	8a 83       	std	Y+2, r24	; 0x02
    168a:	6b 83       	std	Y+3, r22	; 0x03
    168c:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_enumSetPinDirection+0x26>
    1698:	f1 c0       	rjmp	.+482    	; 0x187c <DIO_enumSetPinDirection+0x208>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	88 30       	cpi	r24, 0x08	; 8
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <DIO_enumSetPinDirection+0x2e>
    16a0:	ed c0       	rjmp	.+474    	; 0x187c <DIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8Direction == DIO_OUTPUT)
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	09 f0       	breq	.+2      	; 0x16aa <DIO_enumSetPinDirection+0x36>
    16a8:	6f c0       	rjmp	.+222    	; 0x1788 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	38 87       	std	Y+8, r19	; 0x08
    16b2:	2f 83       	std	Y+7, r18	; 0x07
    16b4:	8f 81       	ldd	r24, Y+7	; 0x07
    16b6:	98 85       	ldd	r25, Y+8	; 0x08
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	49 f1       	breq	.+82     	; 0x1710 <DIO_enumSetPinDirection+0x9c>
    16be:	2f 81       	ldd	r18, Y+7	; 0x07
    16c0:	38 85       	ldd	r19, Y+8	; 0x08
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <DIO_enumSetPinDirection+0x5e>
    16c8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ca:	98 85       	ldd	r25, Y+8	; 0x08
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	61 f0       	breq	.+24     	; 0x16e8 <DIO_enumSetPinDirection+0x74>
    16d0:	d6 c0       	rjmp	.+428    	; 0x187e <DIO_enumSetPinDirection+0x20a>
    16d2:	2f 81       	ldd	r18, Y+7	; 0x07
    16d4:	38 85       	ldd	r19, Y+8	; 0x08
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	71 f1       	breq	.+92     	; 0x1738 <DIO_enumSetPinDirection+0xc4>
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	98 85       	ldd	r25, Y+8	; 0x08
    16e0:	83 30       	cpi	r24, 0x03	; 3
    16e2:	91 05       	cpc	r25, r1
    16e4:	e9 f1       	breq	.+122    	; 0x1760 <DIO_enumSetPinDirection+0xec>
    16e6:	cb c0       	rjmp	.+406    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_REG,Copy_u8Pin); break ;
    16e8:	aa e3       	ldi	r26, 0x3A	; 58
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_enumSetPinDirection+0x92>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_enumSetPinDirection+0x8e>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	b7 c0       	rjmp	.+366    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_REG,Copy_u8Pin); break ;
    1710:	a7 e3       	ldi	r26, 0x37	; 55
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e7 e3       	ldi	r30, 0x37	; 55
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_enumSetPinDirection+0xba>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_enumSetPinDirection+0xb6>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	a3 c0       	rjmp	.+326    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_REG,Copy_u8Pin); break ;
    1738:	a4 e3       	ldi	r26, 0x34	; 52
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e4 e3       	ldi	r30, 0x34	; 52
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	48 2f       	mov	r20, r24
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 2e       	mov	r0, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <DIO_enumSetPinDirection+0xe2>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	0a 94       	dec	r0
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <DIO_enumSetPinDirection+0xde>
    175a:	84 2b       	or	r24, r20
    175c:	8c 93       	st	X, r24
    175e:	8f c0       	rjmp	.+286    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_REG,Copy_u8Pin); break ;
    1760:	a1 e3       	ldi	r26, 0x31	; 49
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e1 e3       	ldi	r30, 0x31	; 49
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_enumSetPinDirection+0x10a>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_enumSetPinDirection+0x106>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	7b c0       	rjmp	.+246    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if (Copy_u8Direction == DIO_INPUT)
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	88 23       	and	r24, r24
    178c:	09 f0       	breq	.+2      	; 0x1790 <DIO_enumSetPinDirection+0x11c>
    178e:	74 c0       	rjmp	.+232    	; 0x1878 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	2d 83       	std	Y+5, r18	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	59 f1       	breq	.+86     	; 0x17fa <DIO_enumSetPinDirection+0x186>
    17a4:	2d 81       	ldd	r18, Y+5	; 0x05
    17a6:	3e 81       	ldd	r19, Y+6	; 0x06
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <DIO_enumSetPinDirection+0x144>
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f0       	breq	.+26     	; 0x17d0 <DIO_enumSetPinDirection+0x15c>
    17b6:	63 c0       	rjmp	.+198    	; 0x187e <DIO_enumSetPinDirection+0x20a>
    17b8:	2d 81       	ldd	r18, Y+5	; 0x05
    17ba:	3e 81       	ldd	r19, Y+6	; 0x06
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	89 f1       	breq	.+98     	; 0x1824 <DIO_enumSetPinDirection+0x1b0>
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <DIO_enumSetPinDirection+0x15a>
    17cc:	40 c0       	rjmp	.+128    	; 0x184e <DIO_enumSetPinDirection+0x1da>
    17ce:	57 c0       	rjmp	.+174    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_REG,Copy_u8Pin); break ;
    17d0:	aa e3       	ldi	r26, 0x3A	; 58
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ea e3       	ldi	r30, 0x3A	; 58
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_enumSetPinDirection+0x17a>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_enumSetPinDirection+0x176>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	42 c0       	rjmp	.+132    	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_REG,Copy_u8Pin); break ;
    17fa:	a7 e3       	ldi	r26, 0x37	; 55
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e7 e3       	ldi	r30, 0x37	; 55
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_enumSetPinDirection+0x1a4>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_enumSetPinDirection+0x1a0>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	2d c0       	rjmp	.+90     	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_REG,Copy_u8Pin); break ;
    1824:	a4 e3       	ldi	r26, 0x34	; 52
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e4 e3       	ldi	r30, 0x34	; 52
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_enumSetPinDirection+0x1ce>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_enumSetPinDirection+0x1ca>
    1846:	80 95       	com	r24
    1848:	84 23       	and	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	18 c0       	rjmp	.+48     	; 0x187e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_REG,Copy_u8Pin); break ;
    184e:	a1 e3       	ldi	r26, 0x31	; 49
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e1 e3       	ldi	r30, 0x31	; 49
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_enumSetPinDirection+0x1f8>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_enumSetPinDirection+0x1f4>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	03 c0       	rjmp	.+6      	; 0x187e <DIO_enumSetPinDirection+0x20a>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	01 c0       	rjmp	.+2      	; 0x187e <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		Local_enumErrorState = DIO_NOK;
    187c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1880:	28 96       	adiw	r28, 0x08	; 8
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DIO_enumSetPinValue>:




DIO_ErrorStatus DIO_enumSetPinValue(u8  Copy_u8Port ,u8 Copy_u8Pin , u8 Copy_u8Value)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	28 97       	sbiw	r28, 0x08	; 8
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	8a 83       	std	Y+2, r24	; 0x02
    18a8:	6b 83       	std	Y+3, r22	; 0x03
    18aa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <DIO_enumSetPinValue+0x26>
    18b6:	f1 c0       	rjmp	.+482    	; 0x1a9a <DIO_enumSetPinValue+0x208>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <DIO_enumSetPinValue+0x2e>
    18be:	ed c0       	rjmp	.+474    	; 0x1a9a <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_HIGH)
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <DIO_enumSetPinValue+0x36>
    18c6:	6f c0       	rjmp	.+222    	; 0x19a6 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	38 87       	std	Y+8, r19	; 0x08
    18d0:	2f 83       	std	Y+7, r18	; 0x07
    18d2:	8f 81       	ldd	r24, Y+7	; 0x07
    18d4:	98 85       	ldd	r25, Y+8	; 0x08
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	49 f1       	breq	.+82     	; 0x192e <DIO_enumSetPinValue+0x9c>
    18dc:	2f 81       	ldd	r18, Y+7	; 0x07
    18de:	38 85       	ldd	r19, Y+8	; 0x08
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <DIO_enumSetPinValue+0x5e>
    18e6:	8f 81       	ldd	r24, Y+7	; 0x07
    18e8:	98 85       	ldd	r25, Y+8	; 0x08
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f0       	breq	.+24     	; 0x1906 <DIO_enumSetPinValue+0x74>
    18ee:	d6 c0       	rjmp	.+428    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
    18f0:	2f 81       	ldd	r18, Y+7	; 0x07
    18f2:	38 85       	ldd	r19, Y+8	; 0x08
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	71 f1       	breq	.+92     	; 0x1956 <DIO_enumSetPinValue+0xc4>
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	e9 f1       	breq	.+122    	; 0x197e <DIO_enumSetPinValue+0xec>
    1904:	cb c0       	rjmp	.+406    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_REG,Copy_u8Pin); break ;
    1906:	ab e3       	ldi	r26, 0x3B	; 59
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e3       	ldi	r30, 0x3B	; 59
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_enumSetPinValue+0x92>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_enumSetPinValue+0x8e>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	b7 c0       	rjmp	.+366    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_REG,Copy_u8Pin); break ;
    192e:	a8 e3       	ldi	r26, 0x38	; 56
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e8 e3       	ldi	r30, 0x38	; 56
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_enumSetPinValue+0xba>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <DIO_enumSetPinValue+0xb6>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	a3 c0       	rjmp	.+326    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_REG,Copy_u8Pin); break ;
    1956:	a5 e3       	ldi	r26, 0x35	; 53
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e3       	ldi	r30, 0x35	; 53
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <DIO_enumSetPinValue+0xe2>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <DIO_enumSetPinValue+0xde>
    1978:	84 2b       	or	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	8f c0       	rjmp	.+286    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_REG,Copy_u8Pin); break ;
    197e:	a2 e3       	ldi	r26, 0x32	; 50
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e2 e3       	ldi	r30, 0x32	; 50
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_enumSetPinValue+0x10a>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_enumSetPinValue+0x106>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	7b c0       	rjmp	.+246    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			}
		}

		else if (Copy_u8Value == DIO_LOW)
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	88 23       	and	r24, r24
    19aa:	09 f0       	breq	.+2      	; 0x19ae <DIO_enumSetPinValue+0x11c>
    19ac:	74 c0       	rjmp	.+232    	; 0x1a96 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3e 83       	std	Y+6, r19	; 0x06
    19b6:	2d 83       	std	Y+5, r18	; 0x05
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	91 05       	cpc	r25, r1
    19c0:	59 f1       	breq	.+86     	; 0x1a18 <DIO_enumSetPinValue+0x186>
    19c2:	2d 81       	ldd	r18, Y+5	; 0x05
    19c4:	3e 81       	ldd	r19, Y+6	; 0x06
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <DIO_enumSetPinValue+0x144>
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f0       	breq	.+26     	; 0x19ee <DIO_enumSetPinValue+0x15c>
    19d4:	63 c0       	rjmp	.+198    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
    19d6:	2d 81       	ldd	r18, Y+5	; 0x05
    19d8:	3e 81       	ldd	r19, Y+6	; 0x06
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	89 f1       	breq	.+98     	; 0x1a42 <DIO_enumSetPinValue+0x1b0>
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <DIO_enumSetPinValue+0x15a>
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c <DIO_enumSetPinValue+0x1da>
    19ec:	57 c0       	rjmp	.+174    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_REG,Copy_u8Pin); break ;
    19ee:	ab e3       	ldi	r26, 0x3B	; 59
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	eb e3       	ldi	r30, 0x3B	; 59
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <DIO_enumSetPinValue+0x17a>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <DIO_enumSetPinValue+0x176>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	42 c0       	rjmp	.+132    	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_REG,Copy_u8Pin); break ;
    1a18:	a8 e3       	ldi	r26, 0x38	; 56
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e8 e3       	ldi	r30, 0x38	; 56
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_enumSetPinValue+0x1a4>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_enumSetPinValue+0x1a0>
    1a3a:	80 95       	com	r24
    1a3c:	84 23       	and	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	2d c0       	rjmp	.+90     	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_REG,Copy_u8Pin); break ;
    1a42:	a5 e3       	ldi	r26, 0x35	; 53
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e3       	ldi	r30, 0x35	; 53
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_enumSetPinValue+0x1ce>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_enumSetPinValue+0x1ca>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	18 c0       	rjmp	.+48     	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_REG,Copy_u8Pin); break ;
    1a6c:	a2 e3       	ldi	r26, 0x32	; 50
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e2 e3       	ldi	r30, 0x32	; 50
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <DIO_enumSetPinValue+0x1f8>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <DIO_enumSetPinValue+0x1f4>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <DIO_enumSetPinValue+0x20a>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		Local_enumErrorState = DIO_NOK;
    1a9a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a9e:	28 96       	adiw	r28, 0x08	; 8
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <DIO_enumGetPinValue>:

DIO_ErrorStatus DIO_enumGetPinValue(u8  Copy_u8Port ,u8 Copy_u8Pin , u8* Copy_pu8Value)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	27 97       	sbiw	r28, 0x07	; 7
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
    1ac6:	6b 83       	std	Y+3, r22	; 0x03
    1ac8:	5d 83       	std	Y+5, r21	; 0x05
    1aca:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <DIO_enumGetPinValue+0x28>
    1ad6:	75 c0       	rjmp	.+234    	; 0x1bc2 <DIO_enumGetPinValue+0x112>
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	88 30       	cpi	r24, 0x08	; 8
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <DIO_enumGetPinValue+0x30>
    1ade:	71 c0       	rjmp	.+226    	; 0x1bc2 <DIO_enumGetPinValue+0x112>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8Port)
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	3f 83       	std	Y+7, r19	; 0x07
    1ae8:	2e 83       	std	Y+6, r18	; 0x06
    1aea:	4e 81       	ldd	r20, Y+6	; 0x06
    1aec:	5f 81       	ldd	r21, Y+7	; 0x07
    1aee:	41 30       	cpi	r20, 0x01	; 1
    1af0:	51 05       	cpc	r21, r1
    1af2:	59 f1       	breq	.+86     	; 0x1b4a <DIO_enumGetPinValue+0x9a>
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	91 05       	cpc	r25, r1
    1afc:	34 f4       	brge	.+12     	; 0x1b0a <DIO_enumGetPinValue+0x5a>
    1afe:	2e 81       	ldd	r18, Y+6	; 0x06
    1b00:	3f 81       	ldd	r19, Y+7	; 0x07
    1b02:	21 15       	cp	r18, r1
    1b04:	31 05       	cpc	r19, r1
    1b06:	69 f0       	breq	.+26     	; 0x1b22 <DIO_enumGetPinValue+0x72>
    1b08:	5d c0       	rjmp	.+186    	; 0x1bc4 <DIO_enumGetPinValue+0x114>
    1b0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1b0c:	5f 81       	ldd	r21, Y+7	; 0x07
    1b0e:	42 30       	cpi	r20, 0x02	; 2
    1b10:	51 05       	cpc	r21, r1
    1b12:	79 f1       	breq	.+94     	; 0x1b72 <DIO_enumGetPinValue+0xc2>
    1b14:	8e 81       	ldd	r24, Y+6	; 0x06
    1b16:	9f 81       	ldd	r25, Y+7	; 0x07
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <DIO_enumGetPinValue+0x70>
    1b1e:	3d c0       	rjmp	.+122    	; 0x1b9a <DIO_enumGetPinValue+0xea>
    1b20:	51 c0       	rjmp	.+162    	; 0x1bc4 <DIO_enumGetPinValue+0x114>
		{
		case DIO_PORTA:  *Copy_pu8Value = GET_BIT(PINA_REG,Copy_u8Pin); break ;
    1b22:	e9 e3       	ldi	r30, 0x39	; 57
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_enumGetPinValue+0x8a>
    1b36:	55 95       	asr	r21
    1b38:	47 95       	ror	r20
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_enumGetPinValue+0x86>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	81 70       	andi	r24, 0x01	; 1
    1b42:	ec 81       	ldd	r30, Y+4	; 0x04
    1b44:	fd 81       	ldd	r31, Y+5	; 0x05
    1b46:	80 83       	st	Z, r24
    1b48:	3d c0       	rjmp	.+122    	; 0x1bc4 <DIO_enumGetPinValue+0x114>
		case DIO_PORTB:  *Copy_pu8Value = GET_BIT(PINB_REG,Copy_u8Pin); break ;
    1b4a:	e6 e3       	ldi	r30, 0x36	; 54
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_enumGetPinValue+0xb2>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_enumGetPinValue+0xae>
    1b66:	ca 01       	movw	r24, r20
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b6e:	80 83       	st	Z, r24
    1b70:	29 c0       	rjmp	.+82     	; 0x1bc4 <DIO_enumGetPinValue+0x114>
		case DIO_PORTC:  *Copy_pu8Value = GET_BIT(PINC_REG,Copy_u8Pin); break ;
    1b72:	e3 e3       	ldi	r30, 0x33	; 51
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_enumGetPinValue+0xda>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_enumGetPinValue+0xd6>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	ec 81       	ldd	r30, Y+4	; 0x04
    1b94:	fd 81       	ldd	r31, Y+5	; 0x05
    1b96:	80 83       	st	Z, r24
    1b98:	15 c0       	rjmp	.+42     	; 0x1bc4 <DIO_enumGetPinValue+0x114>
		case DIO_PORTD:  *Copy_pu8Value = GET_BIT(PIND_REG,Copy_u8Pin); break ;
    1b9a:	e0 e3       	ldi	r30, 0x30	; 48
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_enumGetPinValue+0x102>
    1bae:	55 95       	asr	r21
    1bb0:	47 95       	ror	r20
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_enumGetPinValue+0xfe>
    1bb6:	ca 01       	movw	r24, r20
    1bb8:	81 70       	andi	r24, 0x01	; 1
    1bba:	ec 81       	ldd	r30, Y+4	; 0x04
    1bbc:	fd 81       	ldd	r31, Y+5	; 0x05
    1bbe:	80 83       	st	Z, r24
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <DIO_enumGetPinValue+0x114>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		Local_enumErrorState = DIO_NOK ;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumErrorState;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <DIO_enumTogglePinValue>:



DIO_ErrorStatus DIO_enumTogglePinValue( u8 Copy_u8Port, u8 Copy_u8Pin )
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <DIO_enumTogglePinValue+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <DIO_enumTogglePinValue+0x8>
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= DIO_PIN7 )
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	84 30       	cpi	r24, 0x04	; 4
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <DIO_enumTogglePinValue+0x1e>
    1bf4:	73 c0       	rjmp	.+230    	; 0x1cdc <DIO_enumTogglePinValue+0x104>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 30       	cpi	r24, 0x08	; 8
    1bfa:	08 f0       	brcs	.+2      	; 0x1bfe <DIO_enumTogglePinValue+0x26>
    1bfc:	6f c0       	rjmp	.+222    	; 0x1cdc <DIO_enumTogglePinValue+0x104>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8Port)
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	3d 83       	std	Y+5, r19	; 0x05
    1c06:	2c 83       	std	Y+4, r18	; 0x04
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	91 05       	cpc	r25, r1
    1c10:	49 f1       	breq	.+82     	; 0x1c64 <DIO_enumTogglePinValue+0x8c>
    1c12:	2c 81       	ldd	r18, Y+4	; 0x04
    1c14:	3d 81       	ldd	r19, Y+5	; 0x05
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <DIO_enumTogglePinValue+0x4e>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	61 f0       	breq	.+24     	; 0x1c3c <DIO_enumTogglePinValue+0x64>
    1c24:	5c c0       	rjmp	.+184    	; 0x1cde <DIO_enumTogglePinValue+0x106>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	71 f1       	breq	.+92     	; 0x1c8c <DIO_enumTogglePinValue+0xb4>
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	83 30       	cpi	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	e9 f1       	breq	.+122    	; 0x1cb4 <DIO_enumTogglePinValue+0xdc>
    1c3a:	51 c0       	rjmp	.+162    	; 0x1cde <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin); break ;
    1c3c:	ab e3       	ldi	r26, 0x3B	; 59
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	eb e3       	ldi	r30, 0x3B	; 59
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_enumTogglePinValue+0x82>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_enumTogglePinValue+0x7e>
    1c5e:	84 27       	eor	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	3d c0       	rjmp	.+122    	; 0x1cde <DIO_enumTogglePinValue+0x106>
		case DIO_PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin); break ;
    1c64:	a8 e3       	ldi	r26, 0x38	; 56
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e8 e3       	ldi	r30, 0x38	; 56
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_enumTogglePinValue+0xaa>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_enumTogglePinValue+0xa6>
    1c86:	84 27       	eor	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	29 c0       	rjmp	.+82     	; 0x1cde <DIO_enumTogglePinValue+0x106>
		case DIO_PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin); break ;
    1c8c:	a5 e3       	ldi	r26, 0x35	; 53
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e3       	ldi	r30, 0x35	; 53
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_enumTogglePinValue+0xd2>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_enumTogglePinValue+0xce>
    1cae:	84 27       	eor	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <DIO_enumTogglePinValue+0x106>
		case DIO_PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin); break ;
    1cb4:	a2 e3       	ldi	r26, 0x32	; 50
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e2 e3       	ldi	r30, 0x32	; 50
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_enumTogglePinValue+0xfa>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_enumTogglePinValue+0xf6>
    1cd6:	84 27       	eor	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <DIO_enumTogglePinValue+0x106>
		}
	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		Local_enumErrorState = DIO_NOK ;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enumErrorState;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	27 97       	sbiw	r28, 0x07	; 7
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID  in the valid range */
	if (Copy_u8Port <= DIO_PORTD)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <DIO_enumSetPortDirection+0x24>
    1d12:	6a c0       	rjmp	.+212    	; 0x1de8 <DIO_enumSetPortDirection+0xf8>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	8f 3f       	cpi	r24, 0xFF	; 255
    1d18:	99 f5       	brne	.+102    	; 0x1d80 <DIO_enumSetPortDirection+0x90>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3f 83       	std	Y+7, r19	; 0x07
    1d22:	2e 83       	std	Y+6, r18	; 0x06
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	9f 81       	ldd	r25, Y+7	; 0x07
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	d1 f0       	breq	.+52     	; 0x1d62 <DIO_enumSetPortDirection+0x72>
    1d2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d30:	3f 81       	ldd	r19, Y+7	; 0x07
    1d32:	22 30       	cpi	r18, 0x02	; 2
    1d34:	31 05       	cpc	r19, r1
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <DIO_enumSetPortDirection+0x52>
    1d38:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <DIO_enumSetPortDirection+0x68>
    1d40:	54 c0       	rjmp	.+168    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
    1d42:	2e 81       	ldd	r18, Y+6	; 0x06
    1d44:	3f 81       	ldd	r19, Y+7	; 0x07
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	81 f0       	breq	.+32     	; 0x1d6c <DIO_enumSetPortDirection+0x7c>
    1d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	91 05       	cpc	r25, r1
    1d54:	81 f0       	breq	.+32     	; 0x1d76 <DIO_enumSetPortDirection+0x86>
    1d56:	49 c0       	rjmp	.+146    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			{
			case DIO_PORTA: SET_REG(DDRA_REG); break ;
    1d58:	ea e3       	ldi	r30, 0x3A	; 58
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	80 83       	st	Z, r24
    1d60:	44 c0       	rjmp	.+136    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTB: SET_REG(DDRB_REG); break ;
    1d62:	e7 e3       	ldi	r30, 0x37	; 55
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	80 83       	st	Z, r24
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTC: SET_REG(DDRC_REG); break ;
    1d6c:	e4 e3       	ldi	r30, 0x34	; 52
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	80 83       	st	Z, r24
    1d74:	3a c0       	rjmp	.+116    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTD: SET_REG(DDRD_REG); break ;
    1d76:	e1 e3       	ldi	r30, 0x31	; 49
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	80 83       	st	Z, r24
    1d7e:	35 c0       	rjmp	.+106    	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			}
		}

		else if (Copy_u8Direction == DIO_PORT_INPUT)
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 23       	and	r24, r24
    1d84:	79 f5       	brne	.+94     	; 0x1de4 <DIO_enumSetPortDirection+0xf4>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3d 83       	std	Y+5, r19	; 0x05
    1d8e:	2c 83       	std	Y+4, r18	; 0x04
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	c9 f0       	breq	.+50     	; 0x1dcc <DIO_enumSetPortDirection+0xdc>
    1d9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	2c f4       	brge	.+10     	; 0x1dae <DIO_enumSetPortDirection+0xbe>
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <DIO_enumSetPortDirection+0xd4>
    1dac:	1e c0       	rjmp	.+60     	; 0x1dea <DIO_enumSetPortDirection+0xfa>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <DIO_enumSetPortDirection+0xe4>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	69 f0       	breq	.+26     	; 0x1ddc <DIO_enumSetPortDirection+0xec>
    1dc2:	13 c0       	rjmp	.+38     	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			{
			case DIO_PORTA: CLR_REG(DDRA_REG); break ;
    1dc4:	ea e3       	ldi	r30, 0x3A	; 58
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	10 82       	st	Z, r1
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTB: CLR_REG(DDRB_REG); break ;
    1dcc:	e7 e3       	ldi	r30, 0x37	; 55
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	10 82       	st	Z, r1
    1dd2:	0b c0       	rjmp	.+22     	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTC: CLR_REG(DDRC_REG); break ;
    1dd4:	e4 e3       	ldi	r30, 0x34	; 52
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	10 82       	st	Z, r1
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			case DIO_PORTD: CLR_REG(DDRD_REG); break ;
    1ddc:	e1 e3       	ldi	r30, 0x31	; 49
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	10 82       	st	Z, r1
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <DIO_enumSetPortDirection+0xfa>
			}
		}

		else
		{
			Local_enumErrorState = DIO_NOK;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	01 c0       	rjmp	.+2      	; 0x1dea <DIO_enumSetPortDirection+0xfa>
		}

	}
	else
	{
		Local_enumErrorState = DIO_NOK;
    1de8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dec:	27 96       	adiw	r28, 0x07	; 7
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue(u8  Copy_u8Port , u8 Copy_u8Value)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <DIO_enumSetPortValue+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <DIO_enumSetPortValue+0x8>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8a 83       	std	Y+2, r24	; 0x02
    1e0e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8Port <= DIO_PORTD))
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	84 30       	cpi	r24, 0x04	; 4
    1e18:	98 f5       	brcc	.+102    	; 0x1e80 <DIO_enumSetPortValue+0x82>
	{

		switch(Copy_u8Port)
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3d 83       	std	Y+5, r19	; 0x05
    1e22:	2c 83       	std	Y+4, r18	; 0x04
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	d1 f0       	breq	.+52     	; 0x1e62 <DIO_enumSetPortValue+0x64>
    1e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e30:	3d 81       	ldd	r19, Y+5	; 0x05
    1e32:	22 30       	cpi	r18, 0x02	; 2
    1e34:	31 05       	cpc	r19, r1
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <DIO_enumSetPortValue+0x44>
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <DIO_enumSetPortValue+0x5a>
    1e40:	20 c0       	rjmp	.+64     	; 0x1e82 <DIO_enumSetPortValue+0x84>
    1e42:	2c 81       	ldd	r18, Y+4	; 0x04
    1e44:	3d 81       	ldd	r19, Y+5	; 0x05
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <DIO_enumSetPortValue+0x6e>
    1e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e50:	83 30       	cpi	r24, 0x03	; 3
    1e52:	91 05       	cpc	r25, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <DIO_enumSetPortValue+0x78>
    1e56:	15 c0       	rjmp	.+42     	; 0x1e82 <DIO_enumSetPortValue+0x84>
		{
		case DIO_PORTA: PORTA_REG=Copy_u8Value; break;
    1e58:	eb e3       	ldi	r30, 0x3B	; 59
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	80 83       	st	Z, r24
    1e60:	10 c0       	rjmp	.+32     	; 0x1e82 <DIO_enumSetPortValue+0x84>
		case DIO_PORTB: PORTB_REG=Copy_u8Value; break;
    1e62:	e8 e3       	ldi	r30, 0x38	; 56
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	80 83       	st	Z, r24
    1e6a:	0b c0       	rjmp	.+22     	; 0x1e82 <DIO_enumSetPortValue+0x84>
		case DIO_PORTC: PORTC_REG=Copy_u8Value; break;
    1e6c:	e5 e3       	ldi	r30, 0x35	; 53
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	80 83       	st	Z, r24
    1e74:	06 c0       	rjmp	.+12     	; 0x1e82 <DIO_enumSetPortValue+0x84>
		case DIO_PORTD: PORTD_REG=Copy_u8Value; break;
    1e76:	e2 e3       	ldi	r30, 0x32	; 50
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	80 83       	st	Z, r24
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <DIO_enumSetPortValue+0x84>
		}
	}
	else
	{
		Local_enumErrorState= DIO_NOK;
    1e80:	19 82       	std	Y+1, r1	; 0x01
	}


	return Local_enumErrorState;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <DIO_enumTogglePortValue>:


DIO_ErrorStatus DIO_enumTogglePortValue( u8 Copy_u8Port )
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <DIO_enumTogglePortValue+0x6>
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <DIO_enumTogglePortValue+0x8>
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <DIO_enumTogglePortValue+0x1a>
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <DIO_enumTogglePortValue+0x98>
	{
		switch(Copy_u8Port)
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	3c 83       	std	Y+4, r19	; 0x04
    1eb6:	2b 83       	std	Y+3, r18	; 0x03
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <DIO_enumTogglePortValue+0x68>
    1ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <DIO_enumTogglePortValue+0x42>
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <DIO_enumTogglePortValue+0x58>
    1ed4:	2c c0       	rjmp	.+88     	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
    1ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	b1 f0       	breq	.+44     	; 0x1f0c <DIO_enumTogglePortValue+0x78>
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	c9 f0       	breq	.+50     	; 0x1f1c <DIO_enumTogglePortValue+0x88>
    1eea:	21 c0       	rjmp	.+66     	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA: TOGGLE_REG(PORTA_REG); break;
    1eec:	ab e3       	ldi	r26, 0x3B	; 59
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 95       	com	r24
    1ef8:	8c 93       	st	X, r24
    1efa:	19 c0       	rjmp	.+50     	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTB: TOGGLE_REG(PORTB_REG); break;
    1efc:	a8 e3       	ldi	r26, 0x38	; 56
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e8 e3       	ldi	r30, 0x38	; 56
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 95       	com	r24
    1f08:	8c 93       	st	X, r24
    1f0a:	11 c0       	rjmp	.+34     	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTC: TOGGLE_REG(PORTC_REG); break;
    1f0c:	a5 e3       	ldi	r26, 0x35	; 53
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	80 95       	com	r24
    1f18:	8c 93       	st	X, r24
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTD: TOGGLE_REG(PORTD_REG); break;
    1f1c:	a2 e3       	ldi	r26, 0x32	; 50
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e2 e3       	ldi	r30, 0x32	; 50
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 95       	com	r24
    1f28:	8c 93       	st	X, r24
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <DIO_enumTogglePortValue+0x9a>
		}
	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    1f2c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <DIO_enumSetHighNibbleDirection>:

DIO_ErrorStatus DIO_enumSetHighNibbleDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	27 97       	sbiw	r28, 0x07	; 7
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	8a 83       	std	Y+2, r24	; 0x02
    1f54:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <DIO_enumSetHighNibbleDirection+0x24>
    1f60:	88 c0       	rjmp	.+272    	; 0x2072 <DIO_enumSetHighNibbleDirection+0x134>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	8f 3f       	cpi	r24, 0xFF	; 255
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <DIO_enumSetHighNibbleDirection+0x2c>
    1f68:	3f c0       	rjmp	.+126    	; 0x1fe8 <DIO_enumSetHighNibbleDirection+0xaa>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	3f 83       	std	Y+7, r19	; 0x07
    1f72:	2e 83       	std	Y+6, r18	; 0x06
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	e9 f0       	breq	.+58     	; 0x1fb8 <DIO_enumSetHighNibbleDirection+0x7a>
    1f7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f80:	3f 81       	ldd	r19, Y+7	; 0x07
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <DIO_enumSetHighNibbleDirection+0x54>
    1f88:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	61 f0       	breq	.+24     	; 0x1fa8 <DIO_enumSetHighNibbleDirection+0x6a>
    1f90:	71 c0       	rjmp	.+226    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
    1f92:	2e 81       	ldd	r18, Y+6	; 0x06
    1f94:	3f 81       	ldd	r19, Y+7	; 0x07
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	b1 f0       	breq	.+44     	; 0x1fc8 <DIO_enumSetHighNibbleDirection+0x8a>
    1f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	c9 f0       	breq	.+50     	; 0x1fd8 <DIO_enumSetHighNibbleDirection+0x9a>
    1fa6:	66 c0       	rjmp	.+204    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			{
			case DIO_PORTA: SET_HIGH_NIB(DDRA_REG); break ;
    1fa8:	aa e3       	ldi	r26, 0x3A	; 58
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ea e3       	ldi	r30, 0x3A	; 58
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 6f       	ori	r24, 0xF0	; 240
    1fb4:	8c 93       	st	X, r24
    1fb6:	5e c0       	rjmp	.+188    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTB: SET_HIGH_NIB(DDRB_REG); break ;
    1fb8:	a7 e3       	ldi	r26, 0x37	; 55
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e7 e3       	ldi	r30, 0x37	; 55
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 6f       	ori	r24, 0xF0	; 240
    1fc4:	8c 93       	st	X, r24
    1fc6:	56 c0       	rjmp	.+172    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTC: SET_HIGH_NIB(DDRC_REG); break ;
    1fc8:	a4 e3       	ldi	r26, 0x34	; 52
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e4 e3       	ldi	r30, 0x34	; 52
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 6f       	ori	r24, 0xF0	; 240
    1fd4:	8c 93       	st	X, r24
    1fd6:	4e c0       	rjmp	.+156    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTD: SET_HIGH_NIB(DDRD_REG); break ;
    1fd8:	a1 e3       	ldi	r26, 0x31	; 49
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e1 e3       	ldi	r30, 0x31	; 49
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 6f       	ori	r24, 0xF0	; 240
    1fe4:	8c 93       	st	X, r24
    1fe6:	46 c0       	rjmp	.+140    	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			}


		}
		else if (Copy_u8Direction == DIO_PORT_INPUT)
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 23       	and	r24, r24
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <DIO_enumSetHighNibbleDirection+0xb2>
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <DIO_enumSetHighNibbleDirection+0x130>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3d 83       	std	Y+5, r19	; 0x05
    1ff8:	2c 83       	std	Y+4, r18	; 0x04
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 05       	cpc	r25, r1
    2002:	e9 f0       	breq	.+58     	; 0x203e <DIO_enumSetHighNibbleDirection+0x100>
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	2c f4       	brge	.+10     	; 0x2018 <DIO_enumSetHighNibbleDirection+0xda>
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	9d 81       	ldd	r25, Y+5	; 0x05
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	61 f0       	breq	.+24     	; 0x202e <DIO_enumSetHighNibbleDirection+0xf0>
    2016:	2e c0       	rjmp	.+92     	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
    2018:	2c 81       	ldd	r18, Y+4	; 0x04
    201a:	3d 81       	ldd	r19, Y+5	; 0x05
    201c:	22 30       	cpi	r18, 0x02	; 2
    201e:	31 05       	cpc	r19, r1
    2020:	b1 f0       	breq	.+44     	; 0x204e <DIO_enumSetHighNibbleDirection+0x110>
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	9d 81       	ldd	r25, Y+5	; 0x05
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	91 05       	cpc	r25, r1
    202a:	c9 f0       	breq	.+50     	; 0x205e <DIO_enumSetHighNibbleDirection+0x120>
    202c:	23 c0       	rjmp	.+70     	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			{
			case DIO_PORTA: CLR_HIGH_NIB(DDRA_REG); break ;
    202e:	aa e3       	ldi	r26, 0x3A	; 58
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ea e3       	ldi	r30, 0x3A	; 58
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8f 70       	andi	r24, 0x0F	; 15
    203a:	8c 93       	st	X, r24
    203c:	1b c0       	rjmp	.+54     	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTB: CLR_HIGH_NIB(DDRB_REG); break ;
    203e:	a7 e3       	ldi	r26, 0x37	; 55
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e7 e3       	ldi	r30, 0x37	; 55
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8f 70       	andi	r24, 0x0F	; 15
    204a:	8c 93       	st	X, r24
    204c:	13 c0       	rjmp	.+38     	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTC: CLR_HIGH_NIB(DDRC_REG); break ;
    204e:	a4 e3       	ldi	r26, 0x34	; 52
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e4 e3       	ldi	r30, 0x34	; 52
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	8c 93       	st	X, r24
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			case DIO_PORTD: CLR_HIGH_NIB(DDRD_REG); break ;
    205e:	a1 e3       	ldi	r26, 0x31	; 49
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e1 e3       	ldi	r30, 0x31	; 49
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8f 70       	andi	r24, 0x0F	; 15
    206a:	8c 93       	st	X, r24
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>
			}
		}
		else
		{
			Local_enumErrorState= DIO_NOK;
    206e:	19 82       	std	Y+1, r1	; 0x01
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <DIO_enumSetHighNibbleDirection+0x136>

	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    2072:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
}
    2076:	27 96       	adiw	r28, 0x07	; 7
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <DIO_enumSetHighNibbleValue>:



DIO_ErrorStatus DIO_enumSetHighNibbleValue(u8  Copy_u8Port  , u8 Copy_u8Value)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	27 97       	sbiw	r28, 0x07	; 7
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <DIO_enumSetHighNibbleValue+0x24>
    20aa:	a8 c0       	rjmp	.+336    	; 0x21fc <DIO_enumSetHighNibbleValue+0x174>
	{

		if (Copy_u8Value == DIO_PORT_HIGH)
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	8f 3f       	cpi	r24, 0xFF	; 255
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <DIO_enumSetHighNibbleValue+0x2c>
    20b2:	4f c0       	rjmp	.+158    	; 0x2152 <DIO_enumSetHighNibbleValue+0xca>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3f 83       	std	Y+7, r19	; 0x07
    20bc:	2e 83       	std	Y+6, r18	; 0x06
    20be:	8e 81       	ldd	r24, Y+6	; 0x06
    20c0:	9f 81       	ldd	r25, Y+7	; 0x07
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f1       	breq	.+66     	; 0x210a <DIO_enumSetHighNibbleValue+0x82>
    20c8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ca:	3f 81       	ldd	r19, Y+7	; 0x07
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	2c f4       	brge	.+10     	; 0x20dc <DIO_enumSetHighNibbleValue+0x54>
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
    20d4:	9f 81       	ldd	r25, Y+7	; 0x07
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	61 f0       	breq	.+24     	; 0x20f2 <DIO_enumSetHighNibbleValue+0x6a>
    20da:	91 c0       	rjmp	.+290    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
    20dc:	2e 81       	ldd	r18, Y+6	; 0x06
    20de:	3f 81       	ldd	r19, Y+7	; 0x07
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	f1 f0       	breq	.+60     	; 0x2122 <DIO_enumSetHighNibbleValue+0x9a>
    20e6:	8e 81       	ldd	r24, Y+6	; 0x06
    20e8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ea:	83 30       	cpi	r24, 0x03	; 3
    20ec:	91 05       	cpc	r25, r1
    20ee:	29 f1       	breq	.+74     	; 0x213a <DIO_enumSetHighNibbleValue+0xb2>
    20f0:	86 c0       	rjmp	.+268    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_HIGH_NIB(PORTA_REG,Copy_u8Value); break ;
    20f2:	ab e3       	ldi	r26, 0x3B	; 59
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	eb e3       	ldi	r30, 0x3B	; 59
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	98 2f       	mov	r25, r24
    20fe:	9f 70       	andi	r25, 0x0F	; 15
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	80 7f       	andi	r24, 0xF0	; 240
    2104:	89 2b       	or	r24, r25
    2106:	8c 93       	st	X, r24
    2108:	7a c0       	rjmp	.+244    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_HIGH_NIB(PORTB_REG,Copy_u8Value); break ;
    210a:	a8 e3       	ldi	r26, 0x38	; 56
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e8 e3       	ldi	r30, 0x38	; 56
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	98 2f       	mov	r25, r24
    2116:	9f 70       	andi	r25, 0x0F	; 15
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	80 7f       	andi	r24, 0xF0	; 240
    211c:	89 2b       	or	r24, r25
    211e:	8c 93       	st	X, r24
    2120:	6e c0       	rjmp	.+220    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_HIGH_NIB(PORTC_REG,Copy_u8Value); break ;
    2122:	a5 e3       	ldi	r26, 0x35	; 53
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e3       	ldi	r30, 0x35	; 53
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	98 2f       	mov	r25, r24
    212e:	9f 70       	andi	r25, 0x0F	; 15
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	80 7f       	andi	r24, 0xF0	; 240
    2134:	89 2b       	or	r24, r25
    2136:	8c 93       	st	X, r24
    2138:	62 c0       	rjmp	.+196    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_HIGH_NIB(PORTD_REG,Copy_u8Value); break ;
    213a:	a2 e3       	ldi	r26, 0x32	; 50
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e2 e3       	ldi	r30, 0x32	; 50
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	98 2f       	mov	r25, r24
    2146:	9f 70       	andi	r25, 0x0F	; 15
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	80 7f       	andi	r24, 0xF0	; 240
    214c:	89 2b       	or	r24, r25
    214e:	8c 93       	st	X, r24
    2150:	56 c0       	rjmp	.+172    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			}
		}

		else if (Copy_u8Value == DIO_PORT_LOW)
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	88 23       	and	r24, r24
    2156:	09 f0       	breq	.+2      	; 0x215a <DIO_enumSetHighNibbleValue+0xd2>
    2158:	4f c0       	rjmp	.+158    	; 0x21f8 <DIO_enumSetHighNibbleValue+0x170>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	3d 83       	std	Y+5, r19	; 0x05
    2162:	2c 83       	std	Y+4, r18	; 0x04
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	91 05       	cpc	r25, r1
    216c:	09 f1       	breq	.+66     	; 0x21b0 <DIO_enumSetHighNibbleValue+0x128>
    216e:	2c 81       	ldd	r18, Y+4	; 0x04
    2170:	3d 81       	ldd	r19, Y+5	; 0x05
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	2c f4       	brge	.+10     	; 0x2182 <DIO_enumSetHighNibbleValue+0xfa>
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	9d 81       	ldd	r25, Y+5	; 0x05
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	61 f0       	breq	.+24     	; 0x2198 <DIO_enumSetHighNibbleValue+0x110>
    2180:	3e c0       	rjmp	.+124    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
    2182:	2c 81       	ldd	r18, Y+4	; 0x04
    2184:	3d 81       	ldd	r19, Y+5	; 0x05
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	31 05       	cpc	r19, r1
    218a:	f1 f0       	breq	.+60     	; 0x21c8 <DIO_enumSetHighNibbleValue+0x140>
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	83 30       	cpi	r24, 0x03	; 3
    2192:	91 05       	cpc	r25, r1
    2194:	29 f1       	breq	.+74     	; 0x21e0 <DIO_enumSetHighNibbleValue+0x158>
    2196:	33 c0       	rjmp	.+102    	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_HIGH_NIB(PORTA_REG,Copy_u8Value); break ;
    2198:	ab e3       	ldi	r26, 0x3B	; 59
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	eb e3       	ldi	r30, 0x3B	; 59
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	98 2f       	mov	r25, r24
    21a4:	9f 70       	andi	r25, 0x0F	; 15
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	80 7f       	andi	r24, 0xF0	; 240
    21aa:	89 2b       	or	r24, r25
    21ac:	8c 93       	st	X, r24
    21ae:	27 c0       	rjmp	.+78     	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_HIGH_NIB(PORTB_REG,Copy_u8Value); break ;
    21b0:	a8 e3       	ldi	r26, 0x38	; 56
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e8 e3       	ldi	r30, 0x38	; 56
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	98 2f       	mov	r25, r24
    21bc:	9f 70       	andi	r25, 0x0F	; 15
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	80 7f       	andi	r24, 0xF0	; 240
    21c2:	89 2b       	or	r24, r25
    21c4:	8c 93       	st	X, r24
    21c6:	1b c0       	rjmp	.+54     	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_HIGH_NIB(PORTC_REG,Copy_u8Value); break ;
    21c8:	a5 e3       	ldi	r26, 0x35	; 53
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e5 e3       	ldi	r30, 0x35	; 53
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	98 2f       	mov	r25, r24
    21d4:	9f 70       	andi	r25, 0x0F	; 15
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	80 7f       	andi	r24, 0xF0	; 240
    21da:	89 2b       	or	r24, r25
    21dc:	8c 93       	st	X, r24
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_HIGH_NIB(PORTD_REG,Copy_u8Value); break ;
    21e0:	a2 e3       	ldi	r26, 0x32	; 50
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e2 e3       	ldi	r30, 0x32	; 50
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	98 2f       	mov	r25, r24
    21ec:	9f 70       	andi	r25, 0x0F	; 15
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	80 7f       	andi	r24, 0xF0	; 240
    21f2:	89 2b       	or	r24, r25
    21f4:	8c 93       	st	X, r24
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    21f8:	19 82       	std	Y+1, r1	; 0x01
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <DIO_enumSetHighNibbleValue+0x176>
	}


	else
	{
		Local_enumErrorState= DIO_NOK;
    21fc:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2200:	27 96       	adiw	r28, 0x07	; 7
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <DIO_enumSetLowNibbleDirection>:



DIO_ErrorStatus DIO_enumSetLowNibbleDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	27 97       	sbiw	r28, 0x07	; 7
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	8a 83       	std	Y+2, r24	; 0x02
    2228:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	08 f0       	brcs	.+2      	; 0x2236 <DIO_enumSetLowNibbleDirection+0x24>
    2234:	88 c0       	rjmp	.+272    	; 0x2346 <DIO_enumSetLowNibbleDirection+0x134>
	{
		if (Copy_u8Direction == DIO_PORT_OUTPUT)
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	8f 3f       	cpi	r24, 0xFF	; 255
    223a:	09 f0       	breq	.+2      	; 0x223e <DIO_enumSetLowNibbleDirection+0x2c>
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <DIO_enumSetLowNibbleDirection+0xaa>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	3f 83       	std	Y+7, r19	; 0x07
    2246:	2e 83       	std	Y+6, r18	; 0x06
    2248:	8e 81       	ldd	r24, Y+6	; 0x06
    224a:	9f 81       	ldd	r25, Y+7	; 0x07
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	91 05       	cpc	r25, r1
    2250:	e9 f0       	breq	.+58     	; 0x228c <DIO_enumSetLowNibbleDirection+0x7a>
    2252:	2e 81       	ldd	r18, Y+6	; 0x06
    2254:	3f 81       	ldd	r19, Y+7	; 0x07
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	2c f4       	brge	.+10     	; 0x2266 <DIO_enumSetLowNibbleDirection+0x54>
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	9f 81       	ldd	r25, Y+7	; 0x07
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	61 f0       	breq	.+24     	; 0x227c <DIO_enumSetLowNibbleDirection+0x6a>
    2264:	71 c0       	rjmp	.+226    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
    2266:	2e 81       	ldd	r18, Y+6	; 0x06
    2268:	3f 81       	ldd	r19, Y+7	; 0x07
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	b1 f0       	breq	.+44     	; 0x229c <DIO_enumSetLowNibbleDirection+0x8a>
    2270:	8e 81       	ldd	r24, Y+6	; 0x06
    2272:	9f 81       	ldd	r25, Y+7	; 0x07
    2274:	83 30       	cpi	r24, 0x03	; 3
    2276:	91 05       	cpc	r25, r1
    2278:	c9 f0       	breq	.+50     	; 0x22ac <DIO_enumSetLowNibbleDirection+0x9a>
    227a:	66 c0       	rjmp	.+204    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			{
			case DIO_PORTA: SET_LOW_NIB(DDRA_REG); break ;
    227c:	aa e3       	ldi	r26, 0x3A	; 58
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ea e3       	ldi	r30, 0x3A	; 58
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8f 60       	ori	r24, 0x0F	; 15
    2288:	8c 93       	st	X, r24
    228a:	5e c0       	rjmp	.+188    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTB: SET_LOW_NIB(DDRB_REG); break ;
    228c:	a7 e3       	ldi	r26, 0x37	; 55
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e7 e3       	ldi	r30, 0x37	; 55
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8f 60       	ori	r24, 0x0F	; 15
    2298:	8c 93       	st	X, r24
    229a:	56 c0       	rjmp	.+172    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTC: SET_LOW_NIB(DDRC_REG); break ;
    229c:	a4 e3       	ldi	r26, 0x34	; 52
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e4 e3       	ldi	r30, 0x34	; 52
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 60       	ori	r24, 0x0F	; 15
    22a8:	8c 93       	st	X, r24
    22aa:	4e c0       	rjmp	.+156    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTD: SET_LOW_NIB(DDRD_REG); break ;
    22ac:	a1 e3       	ldi	r26, 0x31	; 49
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e1 e3       	ldi	r30, 0x31	; 49
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	8f 60       	ori	r24, 0x0F	; 15
    22b8:	8c 93       	st	X, r24
    22ba:	46 c0       	rjmp	.+140    	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			}


		}
		else if (Copy_u8Direction == DIO_PORT_INPUT)
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	88 23       	and	r24, r24
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <DIO_enumSetLowNibbleDirection+0xb2>
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <DIO_enumSetLowNibbleDirection+0x130>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3d 83       	std	Y+5, r19	; 0x05
    22cc:	2c 83       	std	Y+4, r18	; 0x04
    22ce:	8c 81       	ldd	r24, Y+4	; 0x04
    22d0:	9d 81       	ldd	r25, Y+5	; 0x05
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	e9 f0       	breq	.+58     	; 0x2312 <DIO_enumSetLowNibbleDirection+0x100>
    22d8:	2c 81       	ldd	r18, Y+4	; 0x04
    22da:	3d 81       	ldd	r19, Y+5	; 0x05
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	2c f4       	brge	.+10     	; 0x22ec <DIO_enumSetLowNibbleDirection+0xda>
    22e2:	8c 81       	ldd	r24, Y+4	; 0x04
    22e4:	9d 81       	ldd	r25, Y+5	; 0x05
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	61 f0       	breq	.+24     	; 0x2302 <DIO_enumSetLowNibbleDirection+0xf0>
    22ea:	2e c0       	rjmp	.+92     	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
    22ec:	2c 81       	ldd	r18, Y+4	; 0x04
    22ee:	3d 81       	ldd	r19, Y+5	; 0x05
    22f0:	22 30       	cpi	r18, 0x02	; 2
    22f2:	31 05       	cpc	r19, r1
    22f4:	b1 f0       	breq	.+44     	; 0x2322 <DIO_enumSetLowNibbleDirection+0x110>
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	9d 81       	ldd	r25, Y+5	; 0x05
    22fa:	83 30       	cpi	r24, 0x03	; 3
    22fc:	91 05       	cpc	r25, r1
    22fe:	c9 f0       	breq	.+50     	; 0x2332 <DIO_enumSetLowNibbleDirection+0x120>
    2300:	23 c0       	rjmp	.+70     	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			{
			case DIO_PORTA: CLR_LOW_NIB(DDRA_REG); break ;
    2302:	aa e3       	ldi	r26, 0x3A	; 58
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	ea e3       	ldi	r30, 0x3A	; 58
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 7f       	andi	r24, 0xF0	; 240
    230e:	8c 93       	st	X, r24
    2310:	1b c0       	rjmp	.+54     	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTB: CLR_LOW_NIB(DDRB_REG); break ;
    2312:	a7 e3       	ldi	r26, 0x37	; 55
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e7 e3       	ldi	r30, 0x37	; 55
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	80 7f       	andi	r24, 0xF0	; 240
    231e:	8c 93       	st	X, r24
    2320:	13 c0       	rjmp	.+38     	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTC: CLR_LOW_NIB(DDRC_REG); break ;
    2322:	a4 e3       	ldi	r26, 0x34	; 52
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e4 e3       	ldi	r30, 0x34	; 52
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	80 7f       	andi	r24, 0xF0	; 240
    232e:	8c 93       	st	X, r24
    2330:	0b c0       	rjmp	.+22     	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			case DIO_PORTD: CLR_LOW_NIB(DDRD_REG); break ;
    2332:	a1 e3       	ldi	r26, 0x31	; 49
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e1 e3       	ldi	r30, 0x31	; 49
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	80 7f       	andi	r24, 0xF0	; 240
    233e:	8c 93       	st	X, r24
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>
			}
		}
		else
		{
			Local_enumErrorState= DIO_NOK;
    2342:	19 82       	std	Y+1, r1	; 0x01
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <DIO_enumSetLowNibbleDirection+0x136>

	}

	else
	{
		Local_enumErrorState= DIO_NOK;
    2346:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    2348:	89 81       	ldd	r24, Y+1	; 0x01

}
    234a:	27 96       	adiw	r28, 0x07	; 7
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <DIO_enumSetLowNibbleValue>:


DIO_ErrorStatus DIO_enumSetLowNibbleValue(u8  Copy_u8Port , u8 Copy_u8Value)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	27 97       	sbiw	r28, 0x07	; 7
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	8a 83       	std	Y+2, r24	; 0x02
    2372:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus Local_enumErrorState = DIO_OK;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= DIO_PORTD)
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	84 30       	cpi	r24, 0x04	; 4
    237c:	08 f0       	brcs	.+2      	; 0x2380 <DIO_enumSetLowNibbleValue+0x24>
    237e:	a8 c0       	rjmp	.+336    	; 0x24d0 <DIO_enumSetLowNibbleValue+0x174>
	{

		if (Copy_u8Value == DIO_PORT_HIGH)
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	8f 3f       	cpi	r24, 0xFF	; 255
    2384:	09 f0       	breq	.+2      	; 0x2388 <DIO_enumSetLowNibbleValue+0x2c>
    2386:	4f c0       	rjmp	.+158    	; 0x2426 <DIO_enumSetLowNibbleValue+0xca>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	3f 83       	std	Y+7, r19	; 0x07
    2390:	2e 83       	std	Y+6, r18	; 0x06
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	91 05       	cpc	r25, r1
    239a:	09 f1       	breq	.+66     	; 0x23de <DIO_enumSetLowNibbleValue+0x82>
    239c:	2e 81       	ldd	r18, Y+6	; 0x06
    239e:	3f 81       	ldd	r19, Y+7	; 0x07
    23a0:	22 30       	cpi	r18, 0x02	; 2
    23a2:	31 05       	cpc	r19, r1
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <DIO_enumSetLowNibbleValue+0x54>
    23a6:	8e 81       	ldd	r24, Y+6	; 0x06
    23a8:	9f 81       	ldd	r25, Y+7	; 0x07
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	61 f0       	breq	.+24     	; 0x23c6 <DIO_enumSetLowNibbleValue+0x6a>
    23ae:	91 c0       	rjmp	.+290    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
    23b0:	2e 81       	ldd	r18, Y+6	; 0x06
    23b2:	3f 81       	ldd	r19, Y+7	; 0x07
    23b4:	22 30       	cpi	r18, 0x02	; 2
    23b6:	31 05       	cpc	r19, r1
    23b8:	f1 f0       	breq	.+60     	; 0x23f6 <DIO_enumSetLowNibbleValue+0x9a>
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	9f 81       	ldd	r25, Y+7	; 0x07
    23be:	83 30       	cpi	r24, 0x03	; 3
    23c0:	91 05       	cpc	r25, r1
    23c2:	29 f1       	breq	.+74     	; 0x240e <DIO_enumSetLowNibbleValue+0xb2>
    23c4:	86 c0       	rjmp	.+268    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_LOW_NIB(PORTA_REG,Copy_u8Value); break ;
    23c6:	ab e3       	ldi	r26, 0x3B	; 59
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	eb e3       	ldi	r30, 0x3B	; 59
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	98 2f       	mov	r25, r24
    23d2:	90 7f       	andi	r25, 0xF0	; 240
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	8f 70       	andi	r24, 0x0F	; 15
    23d8:	89 2b       	or	r24, r25
    23da:	8c 93       	st	X, r24
    23dc:	7a c0       	rjmp	.+244    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_LOW_NIB(PORTB_REG,Copy_u8Value); break ;
    23de:	a8 e3       	ldi	r26, 0x38	; 56
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e8 e3       	ldi	r30, 0x38	; 56
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	98 2f       	mov	r25, r24
    23ea:	90 7f       	andi	r25, 0xF0	; 240
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	8f 70       	andi	r24, 0x0F	; 15
    23f0:	89 2b       	or	r24, r25
    23f2:	8c 93       	st	X, r24
    23f4:	6e c0       	rjmp	.+220    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_LOW_NIB(PORTC_REG,Copy_u8Value); break ;
    23f6:	a5 e3       	ldi	r26, 0x35	; 53
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e5 e3       	ldi	r30, 0x35	; 53
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	98 2f       	mov	r25, r24
    2402:	90 7f       	andi	r25, 0xF0	; 240
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	8f 70       	andi	r24, 0x0F	; 15
    2408:	89 2b       	or	r24, r25
    240a:	8c 93       	st	X, r24
    240c:	62 c0       	rjmp	.+196    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_LOW_NIB(PORTD_REG,Copy_u8Value); break ;
    240e:	a2 e3       	ldi	r26, 0x32	; 50
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e2 e3       	ldi	r30, 0x32	; 50
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	98 2f       	mov	r25, r24
    241a:	90 7f       	andi	r25, 0xF0	; 240
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	8f 70       	andi	r24, 0x0F	; 15
    2420:	89 2b       	or	r24, r25
    2422:	8c 93       	st	X, r24
    2424:	56 c0       	rjmp	.+172    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			}
		}

		else if (Copy_u8Value == DIO_PORT_LOW)
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	88 23       	and	r24, r24
    242a:	09 f0       	breq	.+2      	; 0x242e <DIO_enumSetLowNibbleValue+0xd2>
    242c:	4f c0       	rjmp	.+158    	; 0x24cc <DIO_enumSetLowNibbleValue+0x170>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8Port)
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3d 83       	std	Y+5, r19	; 0x05
    2436:	2c 83       	std	Y+4, r18	; 0x04
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	09 f1       	breq	.+66     	; 0x2484 <DIO_enumSetLowNibbleValue+0x128>
    2442:	2c 81       	ldd	r18, Y+4	; 0x04
    2444:	3d 81       	ldd	r19, Y+5	; 0x05
    2446:	22 30       	cpi	r18, 0x02	; 2
    2448:	31 05       	cpc	r19, r1
    244a:	2c f4       	brge	.+10     	; 0x2456 <DIO_enumSetLowNibbleValue+0xfa>
    244c:	8c 81       	ldd	r24, Y+4	; 0x04
    244e:	9d 81       	ldd	r25, Y+5	; 0x05
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	61 f0       	breq	.+24     	; 0x246c <DIO_enumSetLowNibbleValue+0x110>
    2454:	3e c0       	rjmp	.+124    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
    2456:	2c 81       	ldd	r18, Y+4	; 0x04
    2458:	3d 81       	ldd	r19, Y+5	; 0x05
    245a:	22 30       	cpi	r18, 0x02	; 2
    245c:	31 05       	cpc	r19, r1
    245e:	f1 f0       	breq	.+60     	; 0x249c <DIO_enumSetLowNibbleValue+0x140>
    2460:	8c 81       	ldd	r24, Y+4	; 0x04
    2462:	9d 81       	ldd	r25, Y+5	; 0x05
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	91 05       	cpc	r25, r1
    2468:	29 f1       	breq	.+74     	; 0x24b4 <DIO_enumSetLowNibbleValue+0x158>
    246a:	33 c0       	rjmp	.+102    	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			{
			case DIO_PORTA: ASSIGN_LOW_NIB(PORTA_REG,Copy_u8Value); break ;
    246c:	ab e3       	ldi	r26, 0x3B	; 59
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	eb e3       	ldi	r30, 0x3B	; 59
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	98 2f       	mov	r25, r24
    2478:	90 7f       	andi	r25, 0xF0	; 240
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	89 2b       	or	r24, r25
    2480:	8c 93       	st	X, r24
    2482:	27 c0       	rjmp	.+78     	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTB: ASSIGN_LOW_NIB(PORTB_REG,Copy_u8Value); break ;
    2484:	a8 e3       	ldi	r26, 0x38	; 56
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e3       	ldi	r30, 0x38	; 56
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	98 2f       	mov	r25, r24
    2490:	90 7f       	andi	r25, 0xF0	; 240
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	8f 70       	andi	r24, 0x0F	; 15
    2496:	89 2b       	or	r24, r25
    2498:	8c 93       	st	X, r24
    249a:	1b c0       	rjmp	.+54     	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTC: ASSIGN_LOW_NIB(PORTC_REG,Copy_u8Value); break ;
    249c:	a5 e3       	ldi	r26, 0x35	; 53
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e3       	ldi	r30, 0x35	; 53
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	98 2f       	mov	r25, r24
    24a8:	90 7f       	andi	r25, 0xF0	; 240
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	8f 70       	andi	r24, 0x0F	; 15
    24ae:	89 2b       	or	r24, r25
    24b0:	8c 93       	st	X, r24
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			case DIO_PORTD: ASSIGN_LOW_NIB(PORTD_REG,Copy_u8Value); break ;
    24b4:	a2 e3       	ldi	r26, 0x32	; 50
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e2 e3       	ldi	r30, 0x32	; 50
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	98 2f       	mov	r25, r24
    24c0:	90 7f       	andi	r25, 0xF0	; 240
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	8f 70       	andi	r24, 0x0F	; 15
    24c6:	89 2b       	or	r24, r25
    24c8:	8c 93       	st	X, r24
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
			}
		}
		else
		{
			Local_enumErrorState = DIO_NOK;
    24cc:	19 82       	std	Y+1, r1	; 0x01
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <DIO_enumSetLowNibbleValue+0x176>
	}


	else
	{
		Local_enumErrorState= DIO_NOK;
    24d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enumErrorState;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d4:	27 96       	adiw	r28, 0x07	; 7
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <MAPPING_s32GetOutput>:

#include "STD_TYPES.h"
#include "Mapping_interface.h"

s32 MAPPING_s32GetOutput (s32 Copy_s32InputMin ,s32 Copy_s32InputMax ,s32 Copy_s32OutputMin ,s32 Copy_s32OutputMax ,s32 Copy_s32InputValue )
{
    24e6:	af 92       	push	r10
    24e8:	bf 92       	push	r11
    24ea:	cf 92       	push	r12
    24ec:	df 92       	push	r13
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	a4 97       	sbiw	r28, 0x24	; 36
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	6d 8b       	std	Y+21, r22	; 0x15
    250c:	7e 8b       	std	Y+22, r23	; 0x16
    250e:	8f 8b       	std	Y+23, r24	; 0x17
    2510:	98 8f       	std	Y+24, r25	; 0x18
    2512:	29 8f       	std	Y+25, r18	; 0x19
    2514:	3a 8f       	std	Y+26, r19	; 0x1a
    2516:	4b 8f       	std	Y+27, r20	; 0x1b
    2518:	5c 8f       	std	Y+28, r21	; 0x1c
    251a:	ed 8e       	std	Y+29, r14	; 0x1d
    251c:	fe 8e       	std	Y+30, r15	; 0x1e
    251e:	0f 8f       	std	Y+31, r16	; 0x1f
    2520:	18 a3       	std	Y+32, r17	; 0x20
    2522:	a9 a2       	std	Y+33, r10	; 0x21
    2524:	ba a2       	std	Y+34, r11	; 0x22
    2526:	cb a2       	std	Y+35, r12	; 0x23
    2528:	dc a2       	std	Y+36, r13	; 0x24
	// Calculate the input range and output range spans
	s32 input_span = Copy_s32InputMax - Copy_s32InputMin;
    252a:	29 8d       	ldd	r18, Y+25	; 0x19
    252c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    252e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2530:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2532:	8d 89       	ldd	r24, Y+21	; 0x15
    2534:	9e 89       	ldd	r25, Y+22	; 0x16
    2536:	af 89       	ldd	r26, Y+23	; 0x17
    2538:	b8 8d       	ldd	r27, Y+24	; 0x18
    253a:	79 01       	movw	r14, r18
    253c:	8a 01       	movw	r16, r20
    253e:	e8 1a       	sub	r14, r24
    2540:	f9 0a       	sbc	r15, r25
    2542:	0a 0b       	sbc	r16, r26
    2544:	1b 0b       	sbc	r17, r27
    2546:	d8 01       	movw	r26, r16
    2548:	c7 01       	movw	r24, r14
    254a:	89 8b       	std	Y+17, r24	; 0x11
    254c:	9a 8b       	std	Y+18, r25	; 0x12
    254e:	ab 8b       	std	Y+19, r26	; 0x13
    2550:	bc 8b       	std	Y+20, r27	; 0x14
	s32 output_span = Copy_s32OutputMax - Copy_s32OutputMin;
    2552:	29 a1       	ldd	r18, Y+33	; 0x21
    2554:	3a a1       	ldd	r19, Y+34	; 0x22
    2556:	4b a1       	ldd	r20, Y+35	; 0x23
    2558:	5c a1       	ldd	r21, Y+36	; 0x24
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2560:	b8 a1       	ldd	r27, Y+32	; 0x20
    2562:	79 01       	movw	r14, r18
    2564:	8a 01       	movw	r16, r20
    2566:	e8 1a       	sub	r14, r24
    2568:	f9 0a       	sbc	r15, r25
    256a:	0a 0b       	sbc	r16, r26
    256c:	1b 0b       	sbc	r17, r27
    256e:	d8 01       	movw	r26, r16
    2570:	c7 01       	movw	r24, r14
    2572:	8d 87       	std	Y+13, r24	; 0x0d
    2574:	9e 87       	std	Y+14, r25	; 0x0e
    2576:	af 87       	std	Y+15, r26	; 0x0f
    2578:	b8 8b       	std	Y+16, r27	; 0x10

	// Calculate the input value's distance from the minimum input value
	s32 input_distance = Copy_s32InputValue - Copy_s32InputMin;
    257a:	29 a9       	ldd	r18, Y+49	; 0x31
    257c:	3a a9       	ldd	r19, Y+50	; 0x32
    257e:	4b a9       	ldd	r20, Y+51	; 0x33
    2580:	5c a9       	ldd	r21, Y+52	; 0x34
    2582:	8d 89       	ldd	r24, Y+21	; 0x15
    2584:	9e 89       	ldd	r25, Y+22	; 0x16
    2586:	af 89       	ldd	r26, Y+23	; 0x17
    2588:	b8 8d       	ldd	r27, Y+24	; 0x18
    258a:	79 01       	movw	r14, r18
    258c:	8a 01       	movw	r16, r20
    258e:	e8 1a       	sub	r14, r24
    2590:	f9 0a       	sbc	r15, r25
    2592:	0a 0b       	sbc	r16, r26
    2594:	1b 0b       	sbc	r17, r27
    2596:	d8 01       	movw	r26, r16
    2598:	c7 01       	movw	r24, r14
    259a:	89 87       	std	Y+9, r24	; 0x09
    259c:	9a 87       	std	Y+10, r25	; 0x0a
    259e:	ab 87       	std	Y+11, r26	; 0x0b
    25a0:	bc 87       	std	Y+12, r27	; 0x0c

	// Calculate the proportion of the input range span that the input value represents
	f32 input_proportion = (f32)input_distance / (f32)input_span;
    25a2:	69 85       	ldd	r22, Y+9	; 0x09
    25a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    25a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    25ae:	7b 01       	movw	r14, r22
    25b0:	8c 01       	movw	r16, r24
    25b2:	69 89       	ldd	r22, Y+17	; 0x11
    25b4:	7a 89       	ldd	r23, Y+18	; 0x12
    25b6:	8b 89       	ldd	r24, Y+19	; 0x13
    25b8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    25be:	9b 01       	movw	r18, r22
    25c0:	ac 01       	movw	r20, r24
    25c2:	c8 01       	movw	r24, r16
    25c4:	b7 01       	movw	r22, r14
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8d 83       	std	Y+5, r24	; 0x05
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	af 83       	std	Y+7, r26	; 0x07
    25d4:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the output value by scaling the proportion to the output range span
	s32 output_value = Copy_s32OutputMin + (s32)(input_proportion * output_span);
    25d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    25d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    25da:	8f 85       	ldd	r24, Y+15	; 0x0f
    25dc:	98 89       	ldd	r25, Y+16	; 0x10
    25de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	2d 81       	ldd	r18, Y+5	; 0x05
    25ec:	3e 81       	ldd	r19, Y+6	; 0x06
    25ee:	4f 81       	ldd	r20, Y+7	; 0x07
    25f0:	58 85       	ldd	r21, Y+8	; 0x08
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2602:	9b 01       	movw	r18, r22
    2604:	ac 01       	movw	r20, r24
    2606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    260a:	af 8d       	ldd	r26, Y+31	; 0x1f
    260c:	b8 a1       	ldd	r27, Y+32	; 0x20
    260e:	82 0f       	add	r24, r18
    2610:	93 1f       	adc	r25, r19
    2612:	a4 1f       	adc	r26, r20
    2614:	b5 1f       	adc	r27, r21
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	ab 83       	std	Y+3, r26	; 0x03
    261c:	bc 83       	std	Y+4, r27	; 0x04

	// Return the mapped output value
	return output_value;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	ab 81       	ldd	r26, Y+3	; 0x03
    2624:	bc 81       	ldd	r27, Y+4	; 0x04

}
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	a4 96       	adiw	r28, 0x24	; 36
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	df 90       	pop	r13
    2644:	cf 90       	pop	r12
    2646:	bf 90       	pop	r11
    2648:	af 90       	pop	r10
    264a:	08 95       	ret

0000264c <SW_voidPinInit>:
#include <avr/delay.h>



void SW_voidPinInit(SW_Type *SW_structConfig)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <SW_voidPinInit+0x6>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(SW_structConfig->Port,SW_structConfig->Pin,SW_PIN_INPUT);
    265a:	e9 81       	ldd	r30, Y+1	; 0x01
    265c:	fa 81       	ldd	r31, Y+2	; 0x02
    265e:	80 81       	ld	r24, Z
    2660:	e9 81       	ldd	r30, Y+1	; 0x01
    2662:	fa 81       	ldd	r31, Y+2	; 0x02
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	69 2f       	mov	r22, r25
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enumSetPinDirection>


	/*if State is PUll UP Internal in MC*/
	if (SW_structConfig->Pull_State == SW_INTERNAL_PULL_UP)
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	88 23       	and	r24, r24
    2676:	51 f4       	brne	.+20     	; 0x268c <SW_voidPinInit+0x40>
	{
		DIO_enumSetPinValue(SW_structConfig->Port,SW_structConfig->Pin,SW_PIN_HIGH);
    2678:	e9 81       	ldd	r30, Y+1	; 0x01
    267a:	fa 81       	ldd	r31, Y+2	; 0x02
    267c:	80 81       	ld	r24, Z
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	69 2f       	mov	r22, r25
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>
	}
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <SW_u8GetPressed>:


u8 SW_u8GetPressed(SW_Type *SW_structconfig)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	ea 97       	sbiw	r28, 0x3a	; 58
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	9a af       	std	Y+58, r25	; 0x3a
    26ac:	89 af       	std	Y+57, r24	; 0x39
	/*the return  */
	static	u8 Local_u8PinVal = SW_NOT_PRESSED ;
	static	u8 Local_u8Result = SW_NOT_PRESSED ;

	/*if the State is Pull_up General*/
	if ((SW_structconfig ->Pull_State == SW_INTERNAL_PULL_UP)  || (SW_structconfig ->Pull_State == SW_EXTERNAL_PULL_UP))
    26ae:	e9 ad       	ldd	r30, Y+57	; 0x39
    26b0:	fa ad       	ldd	r31, Y+58	; 0x3a
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	88 23       	and	r24, r24
    26b6:	31 f0       	breq	.+12     	; 0x26c4 <SW_u8GetPressed+0x2e>
    26b8:	e9 ad       	ldd	r30, Y+57	; 0x39
    26ba:	fa ad       	ldd	r31, Y+58	; 0x3a
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <SW_u8GetPressed+0x2e>
    26c2:	01 c1       	rjmp	.+514    	; 0x28c6 <SW_u8GetPressed+0x230>
	{
		/*Get value from Switch*/
		DIO_enumGetPinValue(SW_structconfig->Port,SW_structconfig->Pin,&Local_u8PinVal);
    26c4:	e9 ad       	ldd	r30, Y+57	; 0x39
    26c6:	fa ad       	ldd	r31, Y+58	; 0x3a
    26c8:	80 81       	ld	r24, Z
    26ca:	e9 ad       	ldd	r30, Y+57	; 0x39
    26cc:	fa ad       	ldd	r31, Y+58	; 0x3a
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	29 e6       	ldi	r18, 0x69	; 105
    26d2:	31 e0       	ldi	r19, 0x01	; 1
    26d4:	69 2f       	mov	r22, r25
    26d6:	a9 01       	movw	r20, r18
    26d8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <DIO_enumGetPinValue>

		/*Pressed*/
		if( Local_u8PinVal == 0 )
    26dc:	80 91 69 01 	lds	r24, 0x0169
    26e0:	88 23       	and	r24, r24
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <SW_u8GetPressed+0x50>
    26e4:	75 c0       	rjmp	.+234    	; 0x27d0 <SW_u8GetPressed+0x13a>
		{
			Local_u8Result= SW_PRESSED;
    26e6:	10 92 68 01 	sts	0x0168, r1
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e2       	ldi	r26, 0x20	; 32
    26f0:	b2 e4       	ldi	r27, 0x42	; 66
    26f2:	8d ab       	std	Y+53, r24	; 0x35
    26f4:	9e ab       	std	Y+54, r25	; 0x36
    26f6:	af ab       	std	Y+55, r26	; 0x37
    26f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	6d a9       	ldd	r22, Y+53	; 0x35
    26fc:	7e a9       	ldd	r23, Y+54	; 0x36
    26fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2700:	98 ad       	ldd	r25, Y+56	; 0x38
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a ef       	ldi	r20, 0xFA	; 250
    2708:	54 e4       	ldi	r21, 0x44	; 68
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	89 ab       	std	Y+49, r24	; 0x31
    2714:	9a ab       	std	Y+50, r25	; 0x32
    2716:	ab ab       	std	Y+51, r26	; 0x33
    2718:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    271a:	69 a9       	ldd	r22, Y+49	; 0x31
    271c:	7a a9       	ldd	r23, Y+50	; 0x32
    271e:	8b a9       	ldd	r24, Y+51	; 0x33
    2720:	9c a9       	ldd	r25, Y+52	; 0x34
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <SW_u8GetPressed+0xa6>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <SW_u8GetPressed+0x124>
	else if (__tmp > 65535)
    273c:	69 a9       	ldd	r22, Y+49	; 0x31
    273e:	7a a9       	ldd	r23, Y+50	; 0x32
    2740:	8b a9       	ldd	r24, Y+51	; 0x33
    2742:	9c a9       	ldd	r25, Y+52	; 0x34
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <SW_u8GetPressed+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	6d a9       	ldd	r22, Y+53	; 0x35
    2756:	7e a9       	ldd	r23, Y+54	; 0x36
    2758:	8f a9       	ldd	r24, Y+55	; 0x37
    275a:	98 ad       	ldd	r25, Y+56	; 0x38
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	98 ab       	std	Y+48, r25	; 0x30
    277a:	8f a7       	std	Y+47, r24	; 0x2f
    277c:	0f c0       	rjmp	.+30     	; 0x279c <SW_u8GetPressed+0x106>
    277e:	88 ec       	ldi	r24, 0xC8	; 200
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e a7       	std	Y+46, r25	; 0x2e
    2784:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2786:	8d a5       	ldd	r24, Y+45	; 0x2d
    2788:	9e a5       	ldd	r25, Y+46	; 0x2e
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <SW_u8GetPressed+0xf4>
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8f a5       	ldd	r24, Y+47	; 0x2f
    2794:	98 a9       	ldd	r25, Y+48	; 0x30
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	98 ab       	std	Y+48, r25	; 0x30
    279a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8f a5       	ldd	r24, Y+47	; 0x2f
    279e:	98 a9       	ldd	r25, Y+48	; 0x30
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <SW_u8GetPressed+0xe8>
    27a4:	96 c1       	rjmp	.+812    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	69 a9       	ldd	r22, Y+49	; 0x31
    27a8:	7a a9       	ldd	r23, Y+50	; 0x32
    27aa:	8b a9       	ldd	r24, Y+51	; 0x33
    27ac:	9c a9       	ldd	r25, Y+52	; 0x34
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	98 ab       	std	Y+48, r25	; 0x30
    27b8:	8f a7       	std	Y+47, r24	; 0x2f
    27ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    27bc:	98 a9       	ldd	r25, Y+48	; 0x30
    27be:	9c a7       	std	Y+44, r25	; 0x2c
    27c0:	8b a7       	std	Y+43, r24	; 0x2b
    27c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <SW_u8GetPressed+0x130>
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
    27ce:	81 c1       	rjmp	.+770    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			_delay_ms(40);
		}
		/*Not Pressed*/
		else if( Local_u8PinVal == 1 )
    27d0:	80 91 69 01 	lds	r24, 0x0169
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <SW_u8GetPressed+0x144>
    27d8:	7c c1       	rjmp	.+760    	; 0x2ad2 <SW_u8GetPressed+0x43c>
		{
			Local_u8Result= SW_NOT_PRESSED;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	80 93 68 01 	sts	0x0168, r24
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e2       	ldi	r26, 0x20	; 32
    27e6:	b2 e4       	ldi	r27, 0x42	; 66
    27e8:	8f a3       	std	Y+39, r24	; 0x27
    27ea:	98 a7       	std	Y+40, r25	; 0x28
    27ec:	a9 a7       	std	Y+41, r26	; 0x29
    27ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6f a1       	ldd	r22, Y+39	; 0x27
    27f2:	78 a5       	ldd	r23, Y+40	; 0x28
    27f4:	89 a5       	ldd	r24, Y+41	; 0x29
    27f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8b a3       	std	Y+35, r24	; 0x23
    280a:	9c a3       	std	Y+36, r25	; 0x24
    280c:	ad a3       	std	Y+37, r26	; 0x25
    280e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2810:	6b a1       	ldd	r22, Y+35	; 0x23
    2812:	7c a1       	ldd	r23, Y+36	; 0x24
    2814:	8d a1       	ldd	r24, Y+37	; 0x25
    2816:	9e a1       	ldd	r25, Y+38	; 0x26
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <SW_u8GetPressed+0x19c>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9a a3       	std	Y+34, r25	; 0x22
    282e:	89 a3       	std	Y+33, r24	; 0x21
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <SW_u8GetPressed+0x21a>
	else if (__tmp > 65535)
    2832:	6b a1       	ldd	r22, Y+35	; 0x23
    2834:	7c a1       	ldd	r23, Y+36	; 0x24
    2836:	8d a1       	ldd	r24, Y+37	; 0x25
    2838:	9e a1       	ldd	r25, Y+38	; 0x26
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <SW_u8GetPressed+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6f a1       	ldd	r22, Y+39	; 0x27
    284c:	78 a5       	ldd	r23, Y+40	; 0x28
    284e:	89 a5       	ldd	r24, Y+41	; 0x29
    2850:	9a a5       	ldd	r25, Y+42	; 0x2a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <SW_u8GetPressed+0x1fc>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	98 a3       	std	Y+32, r25	; 0x20
    287a:	8f 8f       	std	Y+31, r24	; 0x1f
    287c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    287e:	98 a1       	ldd	r25, Y+32	; 0x20
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <SW_u8GetPressed+0x1ea>
    2884:	98 a3       	std	Y+32, r25	; 0x20
    2886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	89 a1       	ldd	r24, Y+33	; 0x21
    288a:	9a a1       	ldd	r25, Y+34	; 0x22
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9a a3       	std	Y+34, r25	; 0x22
    2890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	89 a1       	ldd	r24, Y+33	; 0x21
    2894:	9a a1       	ldd	r25, Y+34	; 0x22
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <SW_u8GetPressed+0x1de>
    289a:	1b c1       	rjmp	.+566    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6b a1       	ldd	r22, Y+35	; 0x23
    289e:	7c a1       	ldd	r23, Y+36	; 0x24
    28a0:	8d a1       	ldd	r24, Y+37	; 0x25
    28a2:	9e a1       	ldd	r25, Y+38	; 0x26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9a a3       	std	Y+34, r25	; 0x22
    28ae:	89 a3       	std	Y+33, r24	; 0x21
    28b0:	89 a1       	ldd	r24, Y+33	; 0x21
    28b2:	9a a1       	ldd	r25, Y+34	; 0x22
    28b4:	9e 8f       	std	Y+30, r25	; 0x1e
    28b6:	8d 8f       	std	Y+29, r24	; 0x1d
    28b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <SW_u8GetPressed+0x226>
    28c0:	9e 8f       	std	Y+30, r25	; 0x1e
    28c2:	8d 8f       	std	Y+29, r24	; 0x1d
    28c4:	06 c1       	rjmp	.+524    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			_delay_ms(40);

		}
	}

	else if (SW_structconfig->Pull_State == SW_EXTERNAL_PULL_DOWN)
    28c6:	e9 ad       	ldd	r30, Y+57	; 0x39
    28c8:	fa ad       	ldd	r31, Y+58	; 0x3a
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	09 f0       	breq	.+2      	; 0x28d2 <SW_u8GetPressed+0x23c>
    28d0:	00 c1       	rjmp	.+512    	; 0x2ad2 <SW_u8GetPressed+0x43c>
	{
		/*Get value from Switch*/
		DIO_enumGetPinValue(SW_structconfig->Port,SW_structconfig->Pin,&Local_u8PinVal);
    28d2:	e9 ad       	ldd	r30, Y+57	; 0x39
    28d4:	fa ad       	ldd	r31, Y+58	; 0x3a
    28d6:	80 81       	ld	r24, Z
    28d8:	e9 ad       	ldd	r30, Y+57	; 0x39
    28da:	fa ad       	ldd	r31, Y+58	; 0x3a
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	29 e6       	ldi	r18, 0x69	; 105
    28e0:	31 e0       	ldi	r19, 0x01	; 1
    28e2:	69 2f       	mov	r22, r25
    28e4:	a9 01       	movw	r20, r18
    28e6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <DIO_enumGetPinValue>

		/*Pressed*/
		if( Local_u8PinVal == 1 )
    28ea:	80 91 69 01 	lds	r24, 0x0169
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <SW_u8GetPressed+0x25e>
    28f2:	75 c0       	rjmp	.+234    	; 0x29de <SW_u8GetPressed+0x348>
		{
			Local_u8Result= SW_PRESSED;
    28f4:	10 92 68 01 	sts	0x0168, r1
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e2       	ldi	r26, 0x20	; 32
    28fe:	b2 e4       	ldi	r27, 0x42	; 66
    2900:	89 8f       	std	Y+25, r24	; 0x19
    2902:	9a 8f       	std	Y+26, r25	; 0x1a
    2904:	ab 8f       	std	Y+27, r26	; 0x1b
    2906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	69 8d       	ldd	r22, Y+25	; 0x19
    290a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    290c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    290e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a ef       	ldi	r20, 0xFA	; 250
    2916:	54 e4       	ldi	r21, 0x44	; 68
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8d 8b       	std	Y+21, r24	; 0x15
    2922:	9e 8b       	std	Y+22, r25	; 0x16
    2924:	af 8b       	std	Y+23, r26	; 0x17
    2926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2928:	6d 89       	ldd	r22, Y+21	; 0x15
    292a:	7e 89       	ldd	r23, Y+22	; 0x16
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <SW_u8GetPressed+0x2b4>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	8b 8b       	std	Y+19, r24	; 0x13
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <SW_u8GetPressed+0x332>
	else if (__tmp > 65535)
    294a:	6d 89       	ldd	r22, Y+21	; 0x15
    294c:	7e 89       	ldd	r23, Y+22	; 0x16
    294e:	8f 89       	ldd	r24, Y+23	; 0x17
    2950:	98 8d       	ldd	r25, Y+24	; 0x18
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <SW_u8GetPressed+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	69 8d       	ldd	r22, Y+25	; 0x19
    2964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9c 8b       	std	Y+20, r25	; 0x14
    2988:	8b 8b       	std	Y+19, r24	; 0x13
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <SW_u8GetPressed+0x314>
    298c:	88 ec       	ldi	r24, 0xC8	; 200
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9a 8b       	std	Y+18, r25	; 0x12
    2992:	89 8b       	std	Y+17, r24	; 0x11
    2994:	89 89       	ldd	r24, Y+17	; 0x11
    2996:	9a 89       	ldd	r25, Y+18	; 0x12
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <SW_u8GetPressed+0x302>
    299c:	9a 8b       	std	Y+18, r25	; 0x12
    299e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	9c 89       	ldd	r25, Y+20	; 0x14
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <SW_u8GetPressed+0x2f6>
    29b2:	8f c0       	rjmp	.+286    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9c 8b       	std	Y+20, r25	; 0x14
    29c6:	8b 8b       	std	Y+19, r24	; 0x13
    29c8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ca:	9c 89       	ldd	r25, Y+20	; 0x14
    29cc:	98 8b       	std	Y+16, r25	; 0x10
    29ce:	8f 87       	std	Y+15, r24	; 0x0f
    29d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d2:	98 89       	ldd	r25, Y+16	; 0x10
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <SW_u8GetPressed+0x33e>
    29d8:	98 8b       	std	Y+16, r25	; 0x10
    29da:	8f 87       	std	Y+15, r24	; 0x0f
    29dc:	7a c0       	rjmp	.+244    	; 0x2ad2 <SW_u8GetPressed+0x43c>
			_delay_ms(40);

		}
		/*Not Pressed*/
		else if( Local_u8PinVal == 0 )
    29de:	80 91 69 01 	lds	r24, 0x0169
    29e2:	88 23       	and	r24, r24
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <SW_u8GetPressed+0x352>
    29e6:	75 c0       	rjmp	.+234    	; 0x2ad2 <SW_u8GetPressed+0x43c>
		{
			Local_u8Result= SW_NOT_PRESSED;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	80 93 68 01 	sts	0x0168, r24
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e2       	ldi	r26, 0x20	; 32
    29f4:	b2 e4       	ldi	r27, 0x42	; 66
    29f6:	8b 87       	std	Y+11, r24	; 0x0b
    29f8:	9c 87       	std	Y+12, r25	; 0x0c
    29fa:	ad 87       	std	Y+13, r26	; 0x0d
    29fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8f 83       	std	Y+7, r24	; 0x07
    2a18:	98 87       	std	Y+8, r25	; 0x08
    2a1a:	a9 87       	std	Y+9, r26	; 0x09
    2a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <SW_u8GetPressed+0x3aa>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <SW_u8GetPressed+0x428>
	else if (__tmp > 65535)
    2a40:	6f 81       	ldd	r22, Y+7	; 0x07
    2a42:	78 85       	ldd	r23, Y+8	; 0x08
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <SW_u8GetPressed+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <SW_u8GetPressed+0x40a>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <SW_u8GetPressed+0x3f8>
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <SW_u8GetPressed+0x3ec>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <SW_u8GetPressed+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	9a 83       	std	Y+2, r25	; 0x02
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <SW_u8GetPressed+0x434>
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);

		}
	}

	return Local_u8Result;
    2ad2:	80 91 68 01 	lds	r24, 0x0168
}
    2ad6:	ea 96       	adiw	r28, 0x3a	; 58
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <LED_voidPinInit>:
/*****************************************************************/
/******************* Public Function for Pin LED *****************/
/*****************************************************************/

void LED_voidPinInit( LED_T *LED_Configuration )
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <LED_voidPinInit+0x6>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(LED_Configuration->Port,LED_Configuration->Pin,LED_OUTPUT);
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	80 81       	ld	r24, Z
    2afc:	e9 81       	ldd	r30, Y+1	; 0x01
    2afe:	fa 81       	ldd	r31, Y+2	; 0x02
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	69 2f       	mov	r22, r25
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 3a 0b 	call	0x1674	; 0x1674 <DIO_enumSetPinDirection>
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <LED_voidPinTurnOn>:

void LED_voidPinTurnOn( LED_T *LED_Configuration )
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <LED_voidPinTurnOn+0x6>
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    2b22:	e9 81       	ldd	r30, Y+1	; 0x01
    2b24:	fa 81       	ldd	r31, Y+2	; 0x02
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	59 f4       	brne	.+22     	; 0x2b42 <LED_voidPinTurnOn+0x2e>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_HIGH);
    2b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b30:	80 81       	ld	r24, Z
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	fa 81       	ldd	r31, Y+2	; 0x02
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	69 2f       	mov	r22, r25
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <LED_voidPinTurnOn+0x4c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	88 23       	and	r24, r24
    2b4a:	51 f4       	brne	.+20     	; 0x2b60 <LED_voidPinTurnOn+0x4c>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_LOW);
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	80 81       	ld	r24, Z
    2b52:	e9 81       	ldd	r30, Y+1	; 0x01
    2b54:	fa 81       	ldd	r31, Y+2	; 0x02
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	69 2f       	mov	r22, r25
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>
	}
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <LED_voidPinTurnOff>:


void LED_voidPinTurnOff( LED_T *LED_Configuration )
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <LED_voidPinTurnOff+0x6>
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9a 83       	std	Y+2, r25	; 0x02
    2b76:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	59 f4       	brne	.+22     	; 0x2b98 <LED_voidPinTurnOff+0x2e>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_LOW);
    2b82:	e9 81       	ldd	r30, Y+1	; 0x01
    2b84:	fa 81       	ldd	r31, Y+2	; 0x02
    2b86:	80 81       	ld	r24, Z
    2b88:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	69 2f       	mov	r22, r25
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <LED_voidPinTurnOff+0x4c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    2b98:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	88 23       	and	r24, r24
    2ba0:	51 f4       	brne	.+20     	; 0x2bb6 <LED_voidPinTurnOff+0x4c>
	{
		DIO_enumSetPinValue(LED_Configuration->Port,LED_Configuration->Pin,LED_HIGH);
    2ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba6:	80 81       	ld	r24, Z
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	69 2f       	mov	r22, r25
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>
	}

}
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <LED_voidPinToggle>:



void LED_voidPinToggle( LED_T *LED_Configuration )
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <LED_voidPinToggle+0x6>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumTogglePinValue(LED_Configuration->Port,LED_Configuration->Pin);
    2bce:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd2:	80 81       	ld	r24, Z
    2bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	69 2f       	mov	r22, r25
    2bdc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <DIO_enumTogglePinValue>
}
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <LED_voidPortInit>:
/******************* Public Function for Port LED ****************/
/*****************************************************************/


void LED_voidPortInit( LED_Port_T *LED_Configuration )
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <LED_voidPortInit+0x6>
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	9a 83       	std	Y+2, r25	; 0x02
    2bf6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortDirection(LED_Configuration->Port,LED_PORT_OUTPUT);
    2bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfc:	80 81       	ld	r24, Z
    2bfe:	6f ef       	ldi	r22, 0xFF	; 255
    2c00:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_enumSetPortDirection>
}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <LED_voidPortTurnOn>:

void LED_voidPortTurnOn( LED_Port_T *LED_Configuration )
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <LED_voidPortTurnOn+0x6>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	if (LED_Configuration->Conn_T == LED_SOURCE)
    2c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c20:	81 81       	ldd	r24, Z+1	; 0x01
    2c22:	81 30       	cpi	r24, 0x01	; 1
    2c24:	39 f4       	brne	.+14     	; 0x2c34 <LED_voidPortTurnOn+0x26>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_HIGH);
    2c26:	e9 81       	ldd	r30, Y+1	; 0x01
    2c28:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2a:	80 81       	ld	r24, Z
    2c2c:	6f ef       	ldi	r22, 0xFF	; 255
    2c2e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
    2c32:	0b c0       	rjmp	.+22     	; 0x2c4a <LED_voidPortTurnOn+0x3c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    2c34:	e9 81       	ldd	r30, Y+1	; 0x01
    2c36:	fa 81       	ldd	r31, Y+2	; 0x02
    2c38:	81 81       	ldd	r24, Z+1	; 0x01
    2c3a:	88 23       	and	r24, r24
    2c3c:	31 f4       	brne	.+12     	; 0x2c4a <LED_voidPortTurnOn+0x3c>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_LOW);
    2c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c40:	fa 81       	ldd	r31, Y+2	; 0x02
    2c42:	80 81       	ld	r24, Z
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
	}
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <LED_voidPortTurnOff>:

void LED_voidPortTurnOff( LED_Port_T *LED_Configuration )
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <LED_voidPortTurnOff+0x6>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01

	if (LED_Configuration->Conn_T == LED_SOURCE)
    2c62:	e9 81       	ldd	r30, Y+1	; 0x01
    2c64:	fa 81       	ldd	r31, Y+2	; 0x02
    2c66:	81 81       	ldd	r24, Z+1	; 0x01
    2c68:	81 30       	cpi	r24, 0x01	; 1
    2c6a:	39 f4       	brne	.+14     	; 0x2c7a <LED_voidPortTurnOff+0x26>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_LOW);
    2c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c70:	80 81       	ld	r24, Z
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <LED_voidPortTurnOff+0x3c>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    2c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7e:	81 81       	ldd	r24, Z+1	; 0x01
    2c80:	88 23       	and	r24, r24
    2c82:	31 f4       	brne	.+12     	; 0x2c90 <LED_voidPortTurnOff+0x3c>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,LED_PORT_HIGH);
    2c84:	e9 81       	ldd	r30, Y+1	; 0x01
    2c86:	fa 81       	ldd	r31, Y+2	; 0x02
    2c88:	80 81       	ld	r24, Z
    2c8a:	6f ef       	ldi	r22, 0xFF	; 255
    2c8c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
	}
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <LED_voidPortToggle>:

void LED_voidPortToggle( LED_Port_T *LED_Configuration )
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <LED_voidPortToggle+0x6>
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumTogglePortValue(LED_Configuration->Port);
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	80 81       	ld	r24, Z
    2cae:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <DIO_enumTogglePortValue>
}
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <LED_voidPortSetValue>:


void LED_voidPortSetValue( LED_Port_T *LED_Configuration , u8 Copy_u8Value)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <LED_voidPortSetValue+0x6>
    2cc2:	0f 92       	push	r0
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	6b 83       	std	Y+3, r22	; 0x03
	if (LED_Configuration->Conn_T == LED_SOURCE)
    2cce:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd2:	81 81       	ldd	r24, Z+1	; 0x01
    2cd4:	81 30       	cpi	r24, 0x01	; 1
    2cd6:	39 f4       	brne	.+14     	; 0x2ce6 <LED_voidPortSetValue+0x2a>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,Copy_u8Value);
    2cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cda:	fa 81       	ldd	r31, Y+2	; 0x02
    2cdc:	80 81       	ld	r24, Z
    2cde:	6b 81       	ldd	r22, Y+3	; 0x03
    2ce0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
    2ce4:	0b c0       	rjmp	.+22     	; 0x2cfc <LED_voidPortSetValue+0x40>
	}
	else if (LED_Configuration->Conn_T == LED_SINK)
    2ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cea:	81 81       	ldd	r24, Z+1	; 0x01
    2cec:	88 23       	and	r24, r24
    2cee:	31 f4       	brne	.+12     	; 0x2cfc <LED_voidPortSetValue+0x40>
	{
		DIO_enumSetPortValue(LED_Configuration->Port,Copy_u8Value);
    2cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf4:	80 81       	ld	r24, Z
    2cf6:	6b 81       	ldd	r22, Y+3	; 0x03
    2cf8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumSetPortValue>
	}
}
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	cf 91       	pop	r28
    2d04:	df 91       	pop	r29
    2d06:	08 95       	ret

00002d08 <APP_voidInit>:
LED_T LED_CAR_RED_S2          = {LED_PORTA , LED_PIN7 ,LED_SOURCE}; // Red LED for car (Street 2)
LED_T LED_PEDESTRIAN_GREEN_S2 = {LED_PORTB , LED_PIN0 ,LED_SOURCE}; // Green LED for pedestrian (Street 2)
LED_T LED_PEDESTRIAN_RED_S2   = {LED_PORTB , LED_PIN1 ,LED_SOURCE}; // Red LED for pedestrian (Street 2)

void APP_voidInit(void)
{
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize LEDs for both Street 1 and Street 2 */
	LED_voidPinInit(&LED_CAR_RED_S1);  // Initialize red car LED for Street 1
    2d10:	81 e7       	ldi	r24, 0x71	; 113
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_CAR_YELLOW_S1);  // Initialize yellow car LED for Street 1
    2d18:	8e e6       	ldi	r24, 0x6E	; 110
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
    2d1c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_CAR_GREEN_S1);  // Initialize green car LED for Street 1
    2d20:	8b e6       	ldi	r24, 0x6B	; 107
    2d22:	91 e0       	ldi	r25, 0x01	; 1
    2d24:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_PEDESTRIAN_RED_S1);  // Initialize red pedestrian LED for Street 1
    2d28:	87 e7       	ldi	r24, 0x77	; 119
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_PEDESTRIAN_GREEN_S1);  // Initialize green pedestrian LED for Street 1
    2d30:	84 e7       	ldi	r24, 0x74	; 116
    2d32:	91 e0       	ldi	r25, 0x01	; 1
    2d34:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>

	LED_voidPinInit(&LED_CAR_RED_S2);  // Initialize red car LED for Street 2
    2d38:	80 e8       	ldi	r24, 0x80	; 128
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_CAR_YELLOW_S2);  // Initialize yellow car LED for Street 2
    2d40:	8d e7       	ldi	r24, 0x7D	; 125
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_CAR_GREEN_S2);  // Initialize green car LED for Street 2
    2d48:	8a e7       	ldi	r24, 0x7A	; 122
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_PEDESTRIAN_RED_S2);  // Initialize red pedestrian LED for Street 2
    2d50:	86 e8       	ldi	r24, 0x86	; 134
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>
	LED_voidPinInit(&LED_PEDESTRIAN_GREEN_S2);  // Initialize green pedestrian LED for Street 2
    2d58:	83 e8       	ldi	r24, 0x83	; 131
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LED_voidPinInit>

	/* Set Pin2 and Pin3 in PortD to High for interrupt configuration */
	DIO_enumSetPinValue(DIO_PORTD, DIO_PIN2, DIO_HIGH);  // Set pin for interrupt 1 to high
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 49 0c 	call	0x1892	; 0x1892 <DIO_enumSetPinValue>

	/* Initialize External Interrupt (INT0) and set the callback function for button press */
	EXTI_voidINT0Init();  // Initialize interrupt for button
    2d6a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <EXTI_voidINT0Init>
	EXTI_u8ExtISetCallBackINT0(&ButtonEXTI_voidTrafficLightState_Street);  // Set callback function for interrupt
    2d6e:	87 e8       	ldi	r24, 0x87	; 135
    2d70:	97 e1       	ldi	r25, 0x17	; 23
    2d72:	0e 94 4a 0a 	call	0x1494	; 0x1494 <EXTI_u8ExtISetCallBackINT0>

	/* Initialize Timer0 for delay functionality between LED switching */
	TIMER0_voidInit();  // Initialize Timer0
    2d76:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <TIMER0_voidInit>

	/* Enable global interrupts */
	GIE_voidEnable();  // Enable global interrupts for external interrupt handling
    2d7a:	0e 94 4f 08 	call	0x109e	; 0x109e <GIE_voidEnable>



}
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <APP_voidStartTrifficLight>:

void APP_voidStartTrifficLight(void)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <APP_voidStartTrifficLight+0x6>
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <APP_voidStartTrifficLight+0x8>
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <APP_voidStartTrifficLight+0xa>
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		if (Local_u8MoodState == NORMAL_MOOD)  // Check if the system is in normal traffic mode
    2d92:	80 91 98 01 	lds	r24, 0x0198
    2d96:	88 23       	and	r24, r24
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <APP_voidStartTrifficLight+0x18>
    2d9a:	9f c0       	rjmp	.+318    	; 0x2eda <APP_voidStartTrifficLight+0x156>
		{
			if (ActiveStreet == NO_OD_ACTIVE_STREET_1)  // If Street 1 is active
    2d9c:	80 91 6a 01 	lds	r24, 0x016A
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <APP_voidStartTrifficLight+0x22>
    2da4:	4a c0       	rjmp	.+148    	; 0x2e3a <APP_voidStartTrifficLight+0xb6>
			{
				u8 exitFlag = CLEAR_EXIT_FLAG;  // Flag to exit loop if pedestrian mode is activated
    2da6:	1e 82       	std	Y+6, r1	; 0x06

				/* Street 1: Car moves (green), Pedestrian stops (red) */
				Car_voidGREENLED_S1();  // Turn on green car LED for Street 1
    2da8:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <Car_voidGREENLED_S1>
				PEDESTRIAN_voidREDLED_S1();  // Turn off pedestrian green LED for Street 1
    2dac:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <PEDESTRIAN_voidREDLED_S1>
				Car_voidRedLED_S2();  // Turn off car green LED for Street 2
    2db0:	0e 94 0d 18 	call	0x301a	; 0x301a <Car_voidRedLED_S2>
				PEDESTRIAN_voidGREENLED_S2();  // Turn on pedestrian green LED for Street 2
    2db4:	0e 94 20 18 	call	0x3040	; 0x3040 <PEDESTRIAN_voidGREENLED_S2>

				/* Wait for 5 seconds before switching to the other street */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2db8:	1d 82       	std	Y+5, r1	; 0x05
    2dba:	10 c0       	rjmp	.+32     	; 0x2ddc <APP_voidStartTrifficLight+0x58>
				{
					TIMER0_voidDelay_ms_(DELAY_MS_LOOP_NORMAL_MOOD);  // Delay for 100ms
    2dbc:	64 e6       	ldi	r22, 0x64	; 100
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
					if(Local_u8MoodState == PEDESTRIAN_MOOD)  // Check if the button is pressed
    2dc8:	80 91 98 01 	lds	r24, 0x0198
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <APP_voidStartTrifficLight+0x52>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	8e 83       	std	Y+6, r24	; 0x06
    2dd4:	06 c0       	rjmp	.+12     	; 0x2de2 <APP_voidStartTrifficLight+0x5e>
				PEDESTRIAN_voidREDLED_S1();  // Turn off pedestrian green LED for Street 1
				Car_voidRedLED_S2();  // Turn off car green LED for Street 2
				PEDESTRIAN_voidGREENLED_S2();  // Turn on pedestrian green LED for Street 2

				/* Wait for 5 seconds before switching to the other street */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	8f 5f       	subi	r24, 0xFF	; 255
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	86 39       	cpi	r24, 0x96	; 150
    2de0:	68 f3       	brcs	.-38     	; 0x2dbc <APP_voidStartTrifficLight+0x38>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
						break;  // Exit the loop
					}
				}
				ActiveStreet = NO_OD_ACTIVE_STREET_2;  // Switch to Street 2
    2de2:	82 e0       	ldi	r24, 0x02	; 2
    2de4:	80 93 6a 01 	sts	0x016A, r24

				if (exitFlag == SET_EXIT_FLAG) continue;  // If pedestrian mode is active, skip the remaining code
    2de8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	91 f2       	breq	.-92     	; 0x2d92 <APP_voidStartTrifficLight+0xe>

				/* Street 1: Car stops (yellow), Pedestrian moves (green) */
				Car_voidYallowLED();  // Turn on yellow car LEDs for both streets
    2dee:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>
				Car_voidRedLED_S1();  // Turn off car green LED for Street 1
    2df2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Car_voidRedLED_S1>
				PEDESTRIAN_voidGREENLED_S1();  // Turn on pedestrian green LED for Street 1
    2df6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <PEDESTRIAN_voidGREENLED_S1>
				Car_voidGREENLED_S2();  // Turn on green car LED for Street 2
    2dfa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <Car_voidGREENLED_S2>
				PEDESTRIAN_voidREDLED_S2();  // Turn off pedestrian green LED for Street 2
    2dfe:	0e 94 2f 18 	call	0x305e	; 0x305e <PEDESTRIAN_voidREDLED_S2>

				/* Wait for another 5 seconds */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2e02:	1c 82       	std	Y+4, r1	; 0x04
    2e04:	10 c0       	rjmp	.+32     	; 0x2e26 <APP_voidStartTrifficLight+0xa2>
				{
					TIMER0_voidDelay_ms_(DELAY_MS_LOOP_NORMAL_MOOD);  // Delay for 100ms
    2e06:	64 e6       	ldi	r22, 0x64	; 100
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
					if(Local_u8MoodState == PEDESTRIAN_MOOD)  // Check if pedestrian mode is activated
    2e12:	80 91 98 01 	lds	r24, 0x0198
    2e16:	81 30       	cpi	r24, 0x01	; 1
    2e18:	19 f4       	brne	.+6      	; 0x2e20 <APP_voidStartTrifficLight+0x9c>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	8e 83       	std	Y+6, r24	; 0x06
    2e1e:	06 c0       	rjmp	.+12     	; 0x2e2c <APP_voidStartTrifficLight+0xa8>
				PEDESTRIAN_voidGREENLED_S1();  // Turn on pedestrian green LED for Street 1
				Car_voidGREENLED_S2();  // Turn on green car LED for Street 2
				PEDESTRIAN_voidREDLED_S2();  // Turn off pedestrian green LED for Street 2

				/* Wait for another 5 seconds */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2e20:	8c 81       	ldd	r24, Y+4	; 0x04
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	8c 83       	std	Y+4, r24	; 0x04
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	86 39       	cpi	r24, 0x96	; 150
    2e2a:	68 f3       	brcs	.-38     	; 0x2e06 <APP_voidStartTrifficLight+0x82>
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
						break;  // Exit the loop
					}
				}

				if (exitFlag == SET_EXIT_FLAG) continue;  // If pedestrian mode is active, skip the remaining code
    2e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <APP_voidStartTrifficLight+0xb0>
    2e32:	af cf       	rjmp	.-162    	; 0x2d92 <APP_voidStartTrifficLight+0xe>

				Car_voidYallowLED();  // Turn off yellow car LEDs
    2e34:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>
    2e38:	ac cf       	rjmp	.-168    	; 0x2d92 <APP_voidStartTrifficLight+0xe>
			}
			else if (ActiveStreet == NO_OD_ACTIVE_STREET_2)  // If Street 2 is active
    2e3a:	80 91 6a 01 	lds	r24, 0x016A
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <APP_voidStartTrifficLight+0xc0>
    2e42:	a7 cf       	rjmp	.-178    	; 0x2d92 <APP_voidStartTrifficLight+0xe>
			{
				u8 exitFlag = CLEAR_EXIT_FLAG;  // Flag to exit loop if pedestrian mode is activated
    2e44:	1b 82       	std	Y+3, r1	; 0x03

				/* Street 2: Car moves (green), Pedestrian stops (red) */
				Car_voidGREENLED_S2();  // Turn on green car LED for Street 2
    2e46:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <Car_voidGREENLED_S2>
				PEDESTRIAN_voidREDLED_S2();  // Turn off pedestrian green LED for Street 2
    2e4a:	0e 94 2f 18 	call	0x305e	; 0x305e <PEDESTRIAN_voidREDLED_S2>
				Car_voidRedLED_S1();  // Turn off car green LED for Street 1
    2e4e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Car_voidRedLED_S1>
				PEDESTRIAN_voidGREENLED_S1();  // Turn on pedestrian green LED for Street 1
    2e52:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <PEDESTRIAN_voidGREENLED_S1>

				/* Wait for 5 seconds before switching to the other street */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2e56:	1a 82       	std	Y+2, r1	; 0x02
    2e58:	10 c0       	rjmp	.+32     	; 0x2e7a <APP_voidStartTrifficLight+0xf6>
				{
					TIMER0_voidDelay_ms_(DELAY_MS_LOOP_NORMAL_MOOD);  // Delay for 100ms
    2e5a:	64 e6       	ldi	r22, 0x64	; 100
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
					if(Local_u8MoodState == PEDESTRIAN_MOOD)  // Check if pedestrian mode is activated
    2e66:	80 91 98 01 	lds	r24, 0x0198
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	19 f4       	brne	.+6      	; 0x2e74 <APP_voidStartTrifficLight+0xf0>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    2e72:	06 c0       	rjmp	.+12     	; 0x2e80 <APP_voidStartTrifficLight+0xfc>
				PEDESTRIAN_voidREDLED_S2();  // Turn off pedestrian green LED for Street 2
				Car_voidRedLED_S1();  // Turn off car green LED for Street 1
				PEDESTRIAN_voidGREENLED_S1();  // Turn on pedestrian green LED for Street 1

				/* Wait for 5 seconds before switching to the other street */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD; i++)  // Loop to create a delay of 15 seconds
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	86 39       	cpi	r24, 0x96	; 150
    2e7e:	68 f3       	brcs	.-38     	; 0x2e5a <APP_voidStartTrifficLight+0xd6>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
						break;  // Exit the loop
					}
				}
				ActiveStreet = NO_OD_ACTIVE_STREET_1;  // Switch to Street 1
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	80 93 6a 01 	sts	0x016A, r24

				if (exitFlag == SET_EXIT_FLAG ) continue;  // If pedestrian mode is active, skip the remaining code
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <APP_voidStartTrifficLight+0x10a>
    2e8c:	82 cf       	rjmp	.-252    	; 0x2d92 <APP_voidStartTrifficLight+0xe>

				/* Street 2: Car stops (yellow), Pedestrian moves (green) */
				Car_voidYallowLED();  // Turn on yellow car LEDs for both streets
    2e8e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>
				Car_voidRedLED_S2();  // Turn off car green LED for Street 2
    2e92:	0e 94 0d 18 	call	0x301a	; 0x301a <Car_voidRedLED_S2>
				PEDESTRIAN_voidGREENLED_S2();  // Turn on pedestrian green LED for Street 2
    2e96:	0e 94 20 18 	call	0x3040	; 0x3040 <PEDESTRIAN_voidGREENLED_S2>
				Car_voidGREENLED_S1();  // Turn on green car LED for Street 1
    2e9a:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <Car_voidGREENLED_S1>
				PEDESTRIAN_voidREDLED_S1();  // Turn off pedestrian green LED for Street 1
    2e9e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <PEDESTRIAN_voidREDLED_S1>

				/* Wait for another 5 seconds */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD ; i++)  // Loop to create a delay of 5 seconds
    2ea2:	19 82       	std	Y+1, r1	; 0x01
    2ea4:	10 c0       	rjmp	.+32     	; 0x2ec6 <APP_voidStartTrifficLight+0x142>
				{
					TIMER0_voidDelay_ms_(DELAY_MS_LOOP_NORMAL_MOOD);  // Delay for 100ms
    2ea6:	64 e6       	ldi	r22, 0x64	; 100
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
					if(Local_u8MoodState == PEDESTRIAN_MOOD)  // Check if pedestrian mode is activated
    2eb2:	80 91 98 01 	lds	r24, 0x0198
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	19 f4       	brne	.+6      	; 0x2ec0 <APP_voidStartTrifficLight+0x13c>
					{
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	8b 83       	std	Y+3, r24	; 0x03
    2ebe:	06 c0       	rjmp	.+12     	; 0x2ecc <APP_voidStartTrifficLight+0x148>
				PEDESTRIAN_voidGREENLED_S2();  // Turn on pedestrian green LED for Street 2
				Car_voidGREENLED_S1();  // Turn on green car LED for Street 1
				PEDESTRIAN_voidREDLED_S1();  // Turn off pedestrian green LED for Street 1

				/* Wait for another 5 seconds */
				for(u8 i = SAERT_COUNTER_LOOP_NORMAL_MOOD; i < NO_OF_LOOPS_TIMER0_NORMAL_MOOD ; i++)  // Loop to create a delay of 5 seconds
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	86 39       	cpi	r24, 0x96	; 150
    2eca:	68 f3       	brcs	.-38     	; 0x2ea6 <APP_voidStartTrifficLight+0x122>
						exitFlag = SET_EXIT_FLAG;  // Set exit flag if pedestrian mode is activated
						break;  // Exit the loop
					}
				}

				if (exitFlag == SET_EXIT_FLAG) continue;  // If pedestrian mode is active, skip the remaining code
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <APP_voidStartTrifficLight+0x150>
    2ed2:	5f cf       	rjmp	.-322    	; 0x2d92 <APP_voidStartTrifficLight+0xe>

				Car_voidYallowLED();  // Turn off yellow car LEDs
    2ed4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>
    2ed8:	5c cf       	rjmp	.-328    	; 0x2d92 <APP_voidStartTrifficLight+0xe>
			}
		}
		else if (Local_u8MoodState == PEDESTRIAN_MOOD)  // If the system is in pedestrian mode
    2eda:	80 91 98 01 	lds	r24, 0x0198
    2ede:	81 30       	cpi	r24, 0x01	; 1
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <APP_voidStartTrifficLight+0x160>
    2ee2:	57 cf       	rjmp	.-338    	; 0x2d92 <APP_voidStartTrifficLight+0xe>
		{
			/* Pedestrian Mode: Cars stop, Pedestrians move */
			Car_voidYallowLED();  // Turn on yellow car LEDs for both streets
    2ee4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>
			Car_voidRedLED_S1();  // Turn off car green LED for Street 1
    2ee8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Car_voidRedLED_S1>
			Car_voidRedLED_S2();  // Turn off car green LED for Street 2
    2eec:	0e 94 0d 18 	call	0x301a	; 0x301a <Car_voidRedLED_S2>
			PEDESTRIAN_voidGREENLED_S1();  // Turn on pedestrian green LED for Street 1
    2ef0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <PEDESTRIAN_voidGREENLED_S1>
			PEDESTRIAN_voidGREENLED_S2();  // Turn on pedestrian green LED for Street 2
    2ef4:	0e 94 20 18 	call	0x3040	; 0x3040 <PEDESTRIAN_voidGREENLED_S2>

			/* Wait for 5 seconds to allow pedestrians to cross */
			TIMER0_voidDelay_ms_(DELAY_MS_TIMER0_PEDESTRIAN_MOOD);  // Delay for 5 seconds
    2ef8:	68 e9       	ldi	r22, 0x98	; 152
    2efa:	7a e3       	ldi	r23, 0x3A	; 58
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
			Car_voidYallowLED();  // Turn off yellow car LEDs for both streets
    2f04:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <Car_voidYallowLED>

			/* Switch back to normal mode after pedestrian crossing */
			Local_u8MoodState = NORMAL_MOOD;
    2f08:	10 92 98 01 	sts	0x0198, r1
    2f0c:	42 cf       	rjmp	.-380    	; 0x2d92 <APP_voidStartTrifficLight+0xe>

00002f0e <ButtonEXTI_voidTrafficLightState_Street>:
}


/* Interrupt callback function to handle pedestrian button press */
void ButtonEXTI_voidTrafficLightState_Street(void)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStopTimer();  // Stop timer for immediate response
    2f16:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TIMER0_voidStopTimer>
	if (Local_u8MoodState == NORMAL_MOOD)  // If system is in normal mode
    2f1a:	80 91 98 01 	lds	r24, 0x0198
    2f1e:	88 23       	and	r24, r24
    2f20:	19 f4       	brne	.+6      	; 0x2f28 <ButtonEXTI_voidTrafficLightState_Street+0x1a>
	{
		Local_u8MoodState = PEDESTRIAN_MOOD;  // Switch to pedestrian mode
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	80 93 98 01 	sts	0x0198, r24
	}
}
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <Car_voidGREENLED_S1>:

/* Function to turn on the green LED for Street 1 (Car) */
void Car_voidGREENLED_S1(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_CAR_GREEN_S1);  // Turn on green car LED for Street 1
    2f36:	8b e6       	ldi	r24, 0x6B	; 107
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_CAR_YELLOW_S1);  // Turn off yellow car LED for Street 1
    2f3e:	8e e6       	ldi	r24, 0x6E	; 110
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
	LED_voidPinTurnOff(&LED_CAR_RED_S1);  // Turn off red car LED for Street 1
    2f46:	81 e7       	ldi	r24, 0x71	; 113
    2f48:	91 e0       	ldi	r25, 0x01	; 1
    2f4a:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <Car_voidYallowLED>:

/* Function to toggle the yellow LEDs for both streets */
void Car_voidYallowLED(void)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = SAERT_COUNTER_LOOP_YLED; i < NO_OF_LOOPS_YLED; i++)  // Loop to toggle yellow LED multiple times
    2f5e:	19 82       	std	Y+1, r1	; 0x01
    2f60:	11 c0       	rjmp	.+34     	; 0x2f84 <Car_voidYallowLED+0x30>
	{
		LED_voidPinToggle(&LED_CAR_YELLOW_S1);  // Toggle yellow car LED for Street 1
    2f62:	8e e6       	ldi	r24, 0x6E	; 110
    2f64:	91 e0       	ldi	r25, 0x01	; 1
    2f66:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <LED_voidPinToggle>
		LED_voidPinToggle(&LED_CAR_YELLOW_S2);  // Toggle yellow car LED for Street 2
    2f6a:	8d e7       	ldi	r24, 0x7D	; 125
    2f6c:	91 e0       	ldi	r25, 0x01	; 1
    2f6e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <LED_voidPinToggle>
		TIMER0_voidDelay_ms_(DELAY_MS_LOOP_YLED);  // Delay between toggles
    2f72:	68 ec       	ldi	r22, 0xC8	; 200
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TIMER0_voidDelay_ms_>
}

/* Function to toggle the yellow LEDs for both streets */
void Car_voidYallowLED(void)
{
	for (u8 i = SAERT_COUNTER_LOOP_YLED; i < NO_OF_LOOPS_YLED; i++)  // Loop to toggle yellow LED multiple times
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	8f 5f       	subi	r24, 0xFF	; 255
    2f82:	89 83       	std	Y+1, r24	; 0x01
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	8a 30       	cpi	r24, 0x0A	; 10
    2f88:	60 f3       	brcs	.-40     	; 0x2f62 <Car_voidYallowLED+0xe>
	{
		LED_voidPinToggle(&LED_CAR_YELLOW_S1);  // Toggle yellow car LED for Street 1
		LED_voidPinToggle(&LED_CAR_YELLOW_S2);  // Toggle yellow car LED for Street 2
		TIMER0_voidDelay_ms_(DELAY_MS_LOOP_YLED);  // Delay between toggles
	}
}
    2f8a:	0f 90       	pop	r0
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <Car_voidRedLED_S1>:

/* Function to turn on the red LED for Street 1 (Car) */
void Car_voidRedLED_S1(void)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_CAR_RED_S1);  // Turn on red car LED for Street 1
    2f9a:	81 e7       	ldi	r24, 0x71	; 113
    2f9c:	91 e0       	ldi	r25, 0x01	; 1
    2f9e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_CAR_YELLOW_S1);  // Turn off yellow car LED for Street 1
    2fa2:	8e e6       	ldi	r24, 0x6E	; 110
    2fa4:	91 e0       	ldi	r25, 0x01	; 1
    2fa6:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
	LED_voidPinTurnOff(&LED_CAR_GREEN_S1);  // Turn off green car LED for Street 1
    2faa:	8b e6       	ldi	r24, 0x6B	; 107
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <PEDESTRIAN_voidGREENLED_S1>:

/* Function to turn on the green LED for Street 1 (Pedestrian) */
void PEDESTRIAN_voidGREENLED_S1(void)
{
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_PEDESTRIAN_GREEN_S1);  // Turn on green pedestrian LED for Street 1
    2fc0:	84 e7       	ldi	r24, 0x74	; 116
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_PEDESTRIAN_RED_S1);  // Turn off red pedestrian LED for Street 1
    2fc8:	87 e7       	ldi	r24, 0x77	; 119
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <PEDESTRIAN_voidREDLED_S1>:

/* Function to turn on the red LED for Street 1 (Pedestrian) */
void PEDESTRIAN_voidREDLED_S1(void)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_PEDESTRIAN_RED_S1);  // Turn on red pedestrian LED for Street 1
    2fde:	87 e7       	ldi	r24, 0x77	; 119
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_PEDESTRIAN_GREEN_S1);  // Turn off green pedestrian LED for Street 1
    2fe6:	84 e7       	ldi	r24, 0x74	; 116
    2fe8:	91 e0       	ldi	r25, 0x01	; 1
    2fea:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <Car_voidGREENLED_S2>:

/* Function to turn on the green LED for Street 2 (Car) */
void Car_voidGREENLED_S2(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_CAR_GREEN_S2);  // Turn on green car LED for Street 2
    2ffc:	8a e7       	ldi	r24, 0x7A	; 122
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_CAR_YELLOW_S2);  // Turn off yellow car LED for Street 2
    3004:	8d e7       	ldi	r24, 0x7D	; 125
    3006:	91 e0       	ldi	r25, 0x01	; 1
    3008:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
	LED_voidPinTurnOff(&LED_CAR_RED_S2);  // Turn off red car LED for Street 2
    300c:	80 e8       	ldi	r24, 0x80	; 128
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <Car_voidRedLED_S2>:

/* Function to turn on the red LED for Street 2 (Car) */
void Car_voidRedLED_S2(void)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_CAR_RED_S2);  // Turn on red car LED for Street 2
    3022:	80 e8       	ldi	r24, 0x80	; 128
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_CAR_YELLOW_S2);  // Turn off yellow car LED for Street 2
    302a:	8d e7       	ldi	r24, 0x7D	; 125
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
	LED_voidPinTurnOff(&LED_CAR_GREEN_S2);  // Turn off green car LED for Street 2
    3032:	8a e7       	ldi	r24, 0x7A	; 122
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <PEDESTRIAN_voidGREENLED_S2>:

/* Function to turn on the green LED for Street 2 (Pedestrian) */
void PEDESTRIAN_voidGREENLED_S2(void)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_PEDESTRIAN_GREEN_S2);  // Turn on green pedestrian LED for Street 2
    3048:	83 e8       	ldi	r24, 0x83	; 131
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_PEDESTRIAN_RED_S2);  // Turn off red pedestrian LED for Street 2
    3050:	86 e8       	ldi	r24, 0x86	; 134
    3052:	91 e0       	ldi	r25, 0x01	; 1
    3054:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <PEDESTRIAN_voidREDLED_S2>:

/* Function to turn on the red LED for Street 2 (Pedestrian) */
void PEDESTRIAN_voidREDLED_S2(void)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
	LED_voidPinTurnOn(&LED_PEDESTRIAN_RED_S2);  // Turn on red pedestrian LED for Street 2
    3066:	86 e8       	ldi	r24, 0x86	; 134
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <LED_voidPinTurnOn>
	LED_voidPinTurnOff(&LED_PEDESTRIAN_GREEN_S2);  // Turn off green pedestrian LED for Street 2
    306e:	83 e8       	ldi	r24, 0x83	; 131
    3070:	91 e0       	ldi	r25, 0x01	; 1
    3072:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <LED_voidPinTurnOff>
}
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <main>:

/*APP Layer*/
#include "APP/APP_interface.h"

void main(void)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62

	APP_voidInit();
    3084:	0e 94 84 16 	call	0x2d08	; 0x2d08 <APP_voidInit>

	APP_voidStartTrifficLight();
    3088:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <APP_voidStartTrifficLight>


}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <__prologue_saves__>:
    3092:	2f 92       	push	r2
    3094:	3f 92       	push	r3
    3096:	4f 92       	push	r4
    3098:	5f 92       	push	r5
    309a:	6f 92       	push	r6
    309c:	7f 92       	push	r7
    309e:	8f 92       	push	r8
    30a0:	9f 92       	push	r9
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	ca 1b       	sub	r28, r26
    30bc:	db 0b       	sbc	r29, r27
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	09 94       	ijmp

000030ca <__epilogue_restores__>:
    30ca:	2a 88       	ldd	r2, Y+18	; 0x12
    30cc:	39 88       	ldd	r3, Y+17	; 0x11
    30ce:	48 88       	ldd	r4, Y+16	; 0x10
    30d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30da:	aa 84       	ldd	r10, Y+10	; 0x0a
    30dc:	b9 84       	ldd	r11, Y+9	; 0x09
    30de:	c8 84       	ldd	r12, Y+8	; 0x08
    30e0:	df 80       	ldd	r13, Y+7	; 0x07
    30e2:	ee 80       	ldd	r14, Y+6	; 0x06
    30e4:	fd 80       	ldd	r15, Y+5	; 0x05
    30e6:	0c 81       	ldd	r16, Y+4	; 0x04
    30e8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ea:	aa 81       	ldd	r26, Y+2	; 0x02
    30ec:	b9 81       	ldd	r27, Y+1	; 0x01
    30ee:	ce 0f       	add	r28, r30
    30f0:	d1 1d       	adc	r29, r1
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	ed 01       	movw	r28, r26
    30fe:	08 95       	ret

00003100 <_exit>:
    3100:	f8 94       	cli

00003102 <__stop_program>:
    3102:	ff cf       	rjmp	.-2      	; 0x3102 <__stop_program>
